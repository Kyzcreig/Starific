<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>-750</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///init vars

scr_paddle_init() 


</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///motion blur surface

/*
blurtoggle = true;
/*
surface_reset_target();
surfblur1 = surface_create(room_width,room_height)//we can revise size later
surface_set_target(surfblur1);
draw_clear_alpha(c_black, 0);
surface_reset_target();
surfblur2 = surface_create(room_width,room_height)//we can revise size later
surface_set_target(surfblur2);
draw_clear_alpha(c_black, 0);
surface_reset_target();

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="1" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///garbage collect

ds_list_destroy(dtocornerL)
ds_list_destroy(dtocornerR)
ds_list_destroy(spritestartx)
ds_list_destroy(spriteendx)
ds_list_destroy(caughtList)

//ds_list_destroy(dtocornerL)
/*
surface_free(surfblur1);
surface_free(surfblur2);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///move paddle around, aim and shoot shooter

//TWEENING
oldtheta = (darctan2(oldy-centerfieldy,oldx-centerfieldx)); 
newtheta = (darctan2(y-centerfieldy,x-centerfieldx)); 
difftheta = angle_difference((oldtheta),(newtheta))//angle_difference(oldtheta,newtheta)//
if abs(difftheta) &gt; 2{
   //var diffscale = clamp(difftheta/15,0,.4)
   var top_scale = min(.6, 1 - (10 / PADDLE_H))
   var diff_scale = clamp(power(abs(difftheta),3) / 180,0,top_scale)//2.5 power
   newyscale = 1 - diff_scale//min(.4, (power(abs(difftheta),3)) / 180)
   newxscale = pad_xscale[0] * (1 + diff_scale) //* ()  
}
else{
     newyscale = 1
     newxscale = pad_xscale[0] //* ()//
}
if newyscale != image_yscale{
   image_yscale += (newyscale - image_yscale ) * .15 //* RMSPD_DELTA
                    //NB: Evaluate, did this make it less spazzy?
}
if newxscale != image_xscale{
   image_xscale += (newxscale - image_xscale ) * .15 //* RMSPD_DELTA
}
//else show_message(str_debug('tweenscale',scaleTweener[0])+str_debug('image_xscale',image_xscale))
//FOR TWEENING
oldx = x
oldy = y


//Place Paddle
scr_paddle_placement(mouseangle);
/*
//Split Paddle Ease
if POWER_splitpaddle[0] != 0{
    POWER_splitpaddle[@ 7] += (45/2 - POWER_splitpaddle[@ 7]) * .1;
}
else if POWER_splitpaddle[@ 7] != 0{
    POWER_splitpaddle[@ 7] += (0 - POWER_splitpaddle[@ 7]) * .1;

}*/
    



///DRAW AIMER AND LAUNCH STAR
if !MOVE_ACTIVE and MOVE_READY 
and !TweenExists(scaleTweener)
and MODE != MODES.SANDBOX
{
    sdir = image_angle + 90
    //I could decide the dynamic aimer direction here and remove randomness from shooter
    //launcher grid coordinates
    lgx = round((x-ox -cellW/2) / cellW)
    lgy = round((y-oy -cellH/2) / cellH)
    //fgx = lgx - ((x-ox -cellW/2) / cellW)
    //fgy = lgy - ((y-oy -cellH/2) / cellH)
    launcherX = lgx * cellW + ox + cellW/2
    launcherY = lgy * cellH + oy + cellH/2
    
    //Set vars to calculate visual aimer coordinates
    if sdir == 90 or sdir == 270{
       xx1 = launcherX;
       yy1 = y;
    }
    else if sdir == 0 or sdir == 180{
       xx1 = x;
       yy1 = launcherY; 
    }
    else{
       xx1 = launcherX;
       yy1 = launcherY;
    }
    axx = 0;
    ayy = 0;
    newxx2 = 0;
    newyy2 = 0;
    //Find nearest perpendicular deflector to paddle
    while true{ 
          var _is_collided = collision_line(xx1,yy1, xx1+newxx2, yy1+newyy2, obj_reflector_parent,false,true);
          if _is_collided == noone{
             newxx2 += dcos((sdir))*.5*cellW
             newyy2 -= dsin((sdir))*.5*cellH
             
             if abs(newxx2) &gt; 500 or abs(newyy2) &gt; 500 {
                axx = 0;
                ayy = 0;
                break;
             } 
          }
          else {
               //Run Dynamic Aimer Script [disabled]
               /*if MODE == 2{
                   with (_is_collided) {scr_dynamic_aimer(_is_collided,other.sdir);}
               }*/
               
               //Calculate distance of line to draw for aimer
               var slope1 = sdir
               var x1 = _is_collided.x-5*dcos(slope1)
               var y1 = _is_collided.y+5*dsin(slope1)
               var x2 = _is_collided.x+5*dcos(slope1)
               var y2 = _is_collided.y-5*dsin(slope1)
               var slope2 = image_angle //perpendicular to sdir
               var x3 = x -5*dcos(slope2)
               var y3 = y +5*dsin(slope2)
               var x4 = x +5*dcos(slope2)
               var y4 = y -5*dsin(slope2)
               //so we want to find the intersection of the perpendicular to the deflector and the paddle 
               var _intersection = lines_intersect(x1,y1,x2,y2,x3,y3,x4,y4,false)
               //then i want to use that distance to draw my line from the center of paddle
               //this way the distance is always the same
               if _intersection[0]  //this should fire everytime we have a collision; if it doesn't we might have an infinite loop
               {
                    var vX = _is_collided.x - _intersection[1];
                    var vY = _is_collided.y - _intersection[2];
                    axx = vX;
                    ayy = vY;
               }
               break;
          }
    }
    xx2 += (axx-xx2)*.5
    yy2 += (ayy-yy2)*.5
    
    
    
    
    
    //Launch Shooter on tap
    if (SWIPE_TAP and (abs(axx) + abs(ayy))!=0) and !TUTORIAL_STARTED[0]//!TUTORIAL_ENABLED
    and (!touchPad or (touchPad))
    {
        var obj = instance_create(launcherX,launcherY,obj_star)
        with (obj)
        {
             speed = 0 //Speed is set in STEP event of shooter
             direction = other.sdir //Launch star perpendicular to paddle
             //inFieldState = 0 //Disables collision
             //inField = 0; //Disables collision checking
        }
        // Set Move to Active State
        scr_move_set_active();
        scr_sound(sd_turn_begin,1,false)
    
            
        //Particle Launch Effect
        //part_type_direction(p_impact,sdir-50,sdir+50,0*RMSPD_DELTA,0*RMSPD_DELTA);
        part_type_direction(p_launch,0,359,0*RMSPD_DELTA,0*RMSPD_DELTA);
        //part_type_gravity(p_launch,.075*RMSPD_DELTA,image_angle-90);//.09
        part_type_gravity(p_launch,.075*RMSPD_DELTA,image_angle+90);//.09
        part_particles_create_color(PSYS_SUBSTAR_LAYER, x, y,p_launch,padColor[0], 100);//
        
        //Tween out paddle on launch MOVES_LEFT mode
        if MODE == MODES.MOVES{
           scr_paddle_tween_out()
           //WIPE DYNAMIC AIMER GRID
           //FOR FADEOUT EFFECT CREATE NEW RECURSIVE SCRIPT
           //ds_grid_clear(global.aimerfield,noone)
           //global.aimer_recursions = 0;
        }
    }
}


//Force Destroy paddle while rail shrinking
if !GAME_ACTIVE and (ds_list_size(spritestartx) + ds_list_size(spriteendx)) &gt; 14{
    // If we have too many paddle segements we know we have an issue, so force destroy.
     scr_paddle_tween_out_force()
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///rebound shooters and catch powerups


scr_paddle_collision_step()
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///paddle effects, color changes

//Color according to effect

//Freeze Coloring
if POWER_freeze[@ 0]{
    padColor[0] = power_type_colors(2,0)
} 
else {
    //Power Catch Coloring
    var bigIndex = array_get_largest_index(padColorTimers);
    if padColorTimers[bigIndex] != 0 {
    
        // Set Paddle Color
        padColor[0] = power_paddle_color(bigIndex);
        
        //Decrement timers
        for (var i = 0, n = array_length_1d(padColorTimers); i &lt; n; i++){
            if padColorTimers[i] &gt; 0{
                padColorTimers[i] -= 1;
            }
        }
    } 
    // Overheat Coloring
    else {
        var padSpeedScalar = 1 - obj_control_game.padSpeedPowerSlow * min(1,POWER_slowpaddle[@ 0]);
        var overHeatState = obj_control_game.padSpeed * padSpeedScalar &lt; obj_control_game.padSpeedDefault*.5;
        
        if overHeatState {
            //Set Overheat Color
            padColor[0] = power_paddle_color(1);
        }
        //Normal Coloring
        else {
            padColor[0] = COLORS[0]
        }
    }
    
}
  


</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///debugger
/*
if keyboard_check(vk_alt){
    //Quick theme changer
    if mouse_check_button_released(mb_right) //released
    {
        blurtoggle =!blurtoggle
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="5">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Destroy
if !room_persistent {
    instance_destroy()
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///draw aimer
if !MOVE_ACTIVE { //and global.ActiveStarCount &lt;= 0
    if PADDLE_MOTION and !TUTORIAL_ENABLED
    and MOVE_READY and MODE != MODES.SANDBOX
    and !TweenExists(scaleTweener)
    and (abs(xx2)+abs(yy2) != 0)
    {
       draw_arrow_width(x, y, x+xx2, y+yy2, cellW, 3, padColor[0]);
    
    }
    else{
        xx2 = 0;
        yy2 = 0;
    }
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///x,y marker (red circle) (disabled)

//draw_circle_colour(x,y,5,c_red,c_red,false)
/*
yscaleadjx = dsin((image_angle))*PADDLE_H*((1-image_yscale)/2)//this is for the velocity stretch
yscaleadjy = dcos((image_angle))*PADDLE_H*((1-image_yscale)/2)//this is for the velocity stretch
draw_circle_colour(x+yscaleadjx,y+yscaleadjy,5,c_red,c_red,false)
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///stats (disabled)
/*
draw_set_font(fnt_game_bn_20_black)
draw_text(padcenterx,padcentery-30,'Left Theta='+string(padLTheta));
draw_text(padcenterx,padcentery,'Right Theta='+string(padRTheta));
/*
//var dist = point_distance(x,y,centerfieldx,centerfieldy)
//draw_text(x+10,y+10,'distance: '+string(dist));
draw_set_font(fnt_menu_bn_12_bold)
draw_text(x+10,y+10,'oldtheta: '+string(oldtheta));
draw_text(x+10,y+26,'newtheta: '+string(newtheta));+
draw_text(x+10,y+42,'difftheta: '+string(difftheta));
draw_text(x+10,y+58,'image_yscale: '+string(image_yscale));
/*if x &gt;= ox+(global.fieldW)*cellW{ //if on right side of room
    draw_set_halign(fa_right);
}
else if x &lt;= ox{ //if on left side of room
    draw_set_halign(fa_left);  
}
//draw_text(x+10,y+10,'mouseX: '+string(mouseX));
//draw_text(x+10,y+42,'mouseY: '+string(mouseY));
//draw_text(x+10,y+26,'launcherX: '+string(launcherX));
//draw_text(x+10,y+58,'launcherY: '+string(launcherY));

//draw_text(x+10,y+10,'dtocorner L,R:'+string(dtocornerL)+','+string(dtocornerR))
//draw_text(x+10,y+26,'spritex offset:'+string(sprite_xoffset))

draw_set_halign(fa_left); 
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///collision line (disabled)
/*
var x1, x2, y1, y2, xL, yL, xR, yR;
//this stuff is all fucky because spriteendx is the distance from 0 rather than the distance from the x,y of the object.

x1 = x - dcos((image_angle))*(PADDLE_W / 2 - spritestartx)*image_xscale //left main x
y1 = y + dsin((image_angle))*(PADDLE_W / 2 - spritestartx)*image_xscale //left main y
x2 = x + dcos((image_angle))*(PADDLE_W / 2 - (PADDLE_W - spriteendx))*image_xscale //right main x
y2 = y - dsin((image_angle))*(PADDLE_W / 2 - (PADDLE_W - spriteendx))*image_xscale //right main y

xL = x1 - dcos((image_angle -45))*spritestartx*image_xscale*1.2 //- dsin((image_angle -45))*4 
yL = y1 + dsin((image_angle -45))*spritestartx*image_xscale*1.2 //- dcos((image_angle -45))*4

xR = x2 + dcos((image_angle +45))*(PADDLE_W - spriteendx)*image_xscale*1.2 //- dsin((image_angle +45))*4
yR = y2 - dsin((image_angle +45))*(PADDLE_W - spriteendx)*image_xscale*1.2 //- dcos((image_angle +45))*4

draw_set_color(c_red)
draw_line(x1,y1,x2,y2)
draw_line(xL,yL,x1,y1)
draw_line(xR,yR,x2,y2)
draw_text(x,y-10,'y2: '+string(y2))
draw_text(x,y-26, 'rcorner paddle y'+string(y + dsin((image_angle))*(PADDLE_W / 2 - spriteendx)*image_xscale))

</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///draw paddle


//Maybe want to remove this for the FPS; we'll see
//draw_trail_paddle(x+cd_jiggle[0,1],y+cd_jiggle[0,2],32,PADDLE_H*image_yscale,padColor,sp_white_32,false,.3)
scr_draw_paddle(padColor[0]) //NB: This adds 2 to our batch count.  

</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints>
    <point>80,21</point>
    <point>80,80</point>
  </PhysicsShapePoints>
</object>
