<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>0</visible>
  <depth>0</depth>
  <persistent>-1</persistent>
  <parentName>obj_persistent_parent</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Room Restart and Pause Clear

// Fail Safe to Unpause
if room == rm_game and 
   !GAME_ACTIVE and 
   GAME_PAUSE and 
   !instance_exists(obj_control_pause){
    GAME_PAUSE = false;
}



//RESET ROOM ON NEW GAME
if RESTART_GAME {
   RESTART_GAME = false; 
   NEW_GAME = true
   
   /*
   // Force Music to Pause State if Active
   if MUSIC_STATE == 1 {
     MUSIC_STATE = 2;
   }
   MUSIC_ACTIVE = false;
   
   
   if ScheduleExists(musicStopper){
     ScheduleFinish(musicStopper);  
   }*/
   
   //TweenSystemClearRoom(rm_game);
   TweenSystemClearAllRooms()
   room_persistent = false
   //with(obj_reflector_parent){instance_destroy()}
   LAST_ROOM = rm_menu 
   room_restart()
}

</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Music System
/*
if !audio_exists(CURRENT_SONG) or !audio_is_playing(CURRENT_SONG)
{
    //audio_stop_sound(CURRENT_SONG)
    var r_song = irandom(ds_list_size(music_list)-1)
    var newsong = music_list[| r_song] //music_list[| irandom(ds_list_size(music_list)-1)]//
    CURRENT_SONG = scr_sound(newsong, 100);

}*/
//Enable music on star launch or mixer select

if (MUSIC_STATE == 0 or MUSIC_STATE == 2) and MUSIC_ACTIVE and
    room == rm_game and !TUTORIAL_ENABLED and !GAMEOVER
{
    scr_ResumeMusic(3*room_speed);
}
//If music playing and not on pause page
else if MUSIC_STATE == 1  
{
    // decrement track time counter
    if CURRENT_SONG_TIME &gt; 0 and audio_exists(CURRENT_SONG) and audio_is_playing(CURRENT_SONG){
       CURRENT_SONG_TIME -= 1 * RMSPD_DEFAULT/room_speed //scaled in case we toy with FPS
       
    }
    // if music loaded
    else if audio_group_is_loaded(AG_MusicAll) and // Basic Music Loaded
    (os_browser != browser_not_a_browser or // If HTML
    audio_group_is_loaded(AG_MusicMobile)) and // Or MobileMusic is Loaded
    !GAME_PAUSE //And Game isn't Paused
    {
    
        // if no song active or music is scheduled to be stopped
        if (!audio_exists(CURRENT_SONG) or !audio_is_playing(CURRENT_SONG) or ScheduleExists(musicStopper))
        {
            // immediately stop music
            if ScheduleExists(musicStopper) {ScheduleFinish(musicStopper)}
            
            // select new music
            var rng_song = irandom(ds_list_size(music_list)-1)
            var new_song = music_list[| rng_song];
            CURRENT_SONG_GAIN = 1;
            CURRENT_SONG = scr_sound(new_song, 100);
            CURRENT_SONG_TIME = 5+ audio_sound_length(new_song) * RMSPD_DEFAULT
            //we don't use room_speed because it could be variable, instead we use RMSPD_DEFAULT
        }
        // else we have a mismatch between CURRENT_SONG_TIME and song playing
        else{ 
            // so mute song and clear song index
             scr_MusicStop();
             // NB: Keep Below other lines
             CURRENT_SONG_TIME += .1*RMSPD_DEFAULT 
             

        }
    }
}


</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Debugging (Unlock Everything)


/// Unlock Everything Keyboard
if keyboard_check(vk_shift){
    if keyboard_check_pressed(vk_tab){
        scr_unlocks_set_status_types("0,1,2,3");
    
        // Show Unlock Text
        txt_font = fnt_menu_buttons;
        draw_set_font(txt_font);
        txt_text = "everything unlocked!";   
        txt_height = string_height("H") * .6 ;//+ string_height(txt_text) / 2;
        txt_x = GAME_MID_X;
        txt_y = GAME_MID_Y;  //NB: This'll break if we ever add another toggle
        txt_dur = 2 * room_speed;  
        scr_popup_text_field_static(txt_x,txt_y + txt_height,
        txt_text,COLORS[0],txt_font, true, txt_dur);
        
        // Play Unlock Sound
        scr_sound(sd_gameover_unlock);
    }
    
}


// Unlock Everything Touch
if instance_exists(obj_settings_credits) and 
   point_in_rectangle(mouse_x,mouse_y, VIEW_X+VIEW_W*.9, VIEW_Y, 
   VIEW_X+VIEW_W, VIEW_Y+VIEW_H*.1)
{
    if mouse_check_button_pressed(mb_left) {
        unlockEverythingCounter += 1;
        
        if unlockEverythingCounter &gt;= 7 {
            unlockEverythingCounter = 0;
            scr_unlocks_set_status_types("0,1,2,3");
            
                
            // Show Unlock Text
            txt_font = fnt_menu_buttons;
            draw_set_font(txt_font);
            txt_text = "everything unlocked!";   
            txt_height = string_height("H") * .6 ;//+ string_height(txt_text) / 2;
            txt_x = GAME_MID_X;
            txt_y = GAME_MID_Y;  //NB: This'll break if we ever add another toggle
            txt_dur = 2 * room_speed;  
            scr_popup_text_field_static(txt_x,txt_y + txt_height,
            txt_text,COLORS[0],txt_font, true, txt_dur);
            
            // Play Unlock Sound
            scr_sound(sd_gameover_unlock);
             
        }
    }
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Time Interval Tracking

//NB: A single global dsmap might be much better for our namespace here.

// Set Delta Time Scalar
if GAME_ACTIVE {
    DELTA_TIME_SCALAR = clamp(delta_time / DELTA_TIME_EXPECTED, 0, 2);
        /* Clamped to prevent issues where losing focus on the game makes scalar huge
        
        */
}

//Increment Step Time
STEP++;

if STEP &amp; 1 {
    ALTERNATE_STEP_INTERVAL = 1;
} else {
    ALTERNATE_STEP_INTERVAL = 0;
}

FULL_SECOND_COUNTER++
FULL_SECOND_LERP = FULL_SECOND_COUNTER / (RMSPD_DEFAULT-1);
FULL_SECOND_SINE = sin(STEP * 2 * pi / (2*RMSPD_DEFAULT)) * .5 + .5;
if FULL_SECOND_COUNTER == RMSPD_DEFAULT {
    // Set Intervals
    FULL_SECOND_INTERVAL = 1;
    HALF_SECOND_INTERVAL = 1;
    QUARTER_SECOND_INTERVAL = 1;
    TENTH_SECOND_INTERVAL = 1;
    // Reset Counter
    FULL_SECOND_COUNTER = 0;
} else {
    FULL_SECOND_INTERVAL = 0;
    if FULL_SECOND_COUNTER == RMSPD_DEFAULT div 2{
        // Set Intervals
        HALF_SECOND_INTERVAL = 1;
        QUARTER_SECOND_INTERVAL = 1;
        TENTH_SECOND_INTERVAL = 1;
    }
    else {
        HALF_SECOND_INTERVAL = 0;
        if FULL_SECOND_COUNTER == RMSPD_DEFAULT div 4{
            // Set Intervals
            QUARTER_SECOND_INTERVAL = 1;
        } 
        else {
            QUARTER_SECOND_INTERVAL = 0;
        }
        
        // Tenth of a Second
        if FULL_SECOND_COUNTER mod (RMSPD_DEFAULT / 10){
            TENTH_SECOND_INTERVAL = 1;
        }
        else {
            TENTH_SECOND_INTERVAL = 0;
        }
    }
}




</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Particle Depth HTML Fix
/*
if 0 and GAME_IS_HTML5 {
    scr_part_systems_set_depth();

}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Debugging 

if keyboard_check(vk_shift) and keyboard_check_pressed(vk_home){
    scr_screenshot_highdef_file("ss_debug.png",0);
}

/*
if mouse_check_button_pressed(mb_right) {
    scr_popup_text_field_static(mouse_x,mouse_y,string(random(100000)),
        COLORS[0],fnt_menu_buttons,1,5*room_speed);
    
    
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Set Fixed Touch Pad Home Location


scr_tp_set_fixed();


</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="4">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Room Init
draw_texture_flush(); //NB: Useful to manage video memory between rooms
draw_enable_drawevent(1);

// Prevent Duplication of Stuff When Persistent
if room_persistent {
    // e.g. When Paused or using Custom button
    exit;
}

// Set Room_Speed
room_speed = RMSPD_DEFAULT;

// Reset Room Speed if Necessary
scr_main_reset_room_speed()


//Create Frameskipper for Lag
//NB: We don't use skipper on HTML because we would need to not clear the app surface for it to work.
if os_browser == browser_not_a_browser and 
    RMSPD_DEFAULT &gt;= 60
    //NB: Only use frame skipper when FPS is &gt;= 60
{ 
   // Create Frame Skipper for anti-lag
   ScheduleScript(id,false,6,CreateInstanceIfNone,x,y,obj_frame_skip_custom);
        //NB: Frameskipper is not responsible for pause screen blink.
            //That was from the order of draw and step not being the same always.
}



switch room {

case rm_init:
    ScheduleScript(id, false, 3, scr_room_goto, rm_menu);
break;

case rm_menu:
    //Disable Music
    MUSIC_STATE = 0;
    //scr_StopMusic(1);


    // Create Menu Object
    if !instance_exists(obj_control_menu) and (
        os_browser == browser_not_a_browser 
        or (os_browser == browser_chrome)
        or (os_browser == browser_firefox)
       )
    //(os_browser == browser_not_a_browser or (os_browser == browser_chrome))
    {
      ScheduleScript(id,false,2,CreateInstanceIfNone,x,y,obj_control_menu)
    }
    // Else if Non-valid Browser Create "Adequate Browser Required" Text
    else if !instance_exists(obj_control_browser) 
    {
      ScheduleScript(id,false,2,CreateInstanceIfNone,x,y,obj_control_browser)
    }
break;

case rm_game:
    ScheduleScript(id,false,2,CreateInstanceIfNone,x,y,obj_control_game);
    ScheduleScript(id,false,3,CreateInstanceIfNone,x,y,obj_control_debugger);

break;


case rm_stats:
    ScheduleScript(id,false,2,CreateInstanceIfNone,x,y,obj_control_stats);
break;

case rm_options:
    ScheduleScript(id,false,2,CreateInstanceIfNone,x,y,obj_settings_main);
    /*
    switch SETTINGS_ROOM {
        case 0:
            ScheduleScript(id,false,1,CreateInstanceIfNone,x,y,obj_control_settings);
        
        
        break;
        case 1:
        
        
        break;
        case 2:
        
        
        break;
        case 3:
        
        
        break;
        case 4:
        
        
        break;
        case 5:
        
        
        break;
        case 6:
        
        
        break;
        default:
        
        break;
    }
    */

break;
}


</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="3">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Garbage Collect

// Clear Field Data Structures
scr_field_data_dealloc();


// Clear Music Stuff`   
scr_sounds_dealloc();
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="2">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Set Aspect


//Set Smooth Drawing
scr_draw_smoothing(1);
// Set Filming 
game_filming = 0; //0
//Enable Debug
show_debug_overlay(os_browser == browser_not_a_browser 
                   &amp;&amp; os_type == os_windows &amp;&amp; !game_filming);
//show_debug_overlay(1); //Override

     
globalvar PADDING, STRETCHING;
PADDING = false; 
STRETCHING = false;

globalvar VIEW_W, VIEW_H, VIEW_X, VIEW_Y, PORT_W,PORT_H, ASPECT;
globalvar GAME_W, GAME_H, GAME_X, GAME_Y;
GAME_W = 640;
GAME_H = 1136;
PORT_W = window_get_width();
PORT_H = window_get_height();
ASPECT = PORT_W / PORT_H;

// Resize Application Surface (Incase not Disable)
surface_resize(application_surface,PORT_W,PORT_H);
// Disable App Surface
application_surface_enable(0); 
    //NB: App Surface halves my FPS, so I disable it



// Mobile Devices
if (os_type == os_ios || os_device == device_ios_ipad) || 
   (os_type == os_android || os_device == device_tablet)
{
    PADDING = true;
}
// Desktops and browsers  
else if os_browser == browser_not_a_browser ||
        os_browser != browser_not_a_browser
        //os_type == os_windows || 
        //os_type == os_macosx  ||  
{
    //Scale Down Display to at most XX%
    var MAX_H_SCALE;
    // If Desktop 
    if os_browser == browser_not_a_browser{
        MAX_H_SCALE = .75;
    }
    // If Browser 
    else {
        MAX_H_SCALE = 1;
    }
    
    var MAX_H = display_get_height() * MAX_H_SCALE//*.75
    // If Sceen Too Small (For Full Resolution) and Not Browser
    if GAME_H &gt; MAX_H
    {
        //var adj = real_roundto(MAX_H/GAME_H,.01) 
        var adj = MAX_H/GAME_H; 
                        //NB:I was thinking you need exact integer factors but you don't (GCD)
        PORT_W = round(GAME_W*adj);
        PORT_H = round(GAME_H*adj);
        window_set_size(PORT_W,PORT_H)
    }
    //You could get much more sophisticated with this method for situations where the width is too small, and so on.
    //But I don't think that'll be necessary, we can add fixes as needed.
    
    // Set Views
    VIEW_W = GAME_W;
    VIEW_H = GAME_H;
    // Set Window Aspect
    ASPECT = PORT_W / PORT_H;
}

//TESTING RESOLUTION
if os_type == os_windows and game_filming//DISABLE THIS BLOCK
{
    application_surface_enable(0); 
    //For all this to work app surface needs to be enabled
    //window_set_size(768,1024) //ipad resolution
        //We can try out any window size here
    //window_set_size(640,1136) //unscale full res
    //window_set_size(1920,1136)
    //window_set_size(1920,1080)
    
    if 1{
        PORT_W = round( GAME_W * .95)//.75;
        PORT_H = round( GAME_H * .95 )//.75;
        //PORT_W = 768;
        //PORT_H = 1024;
        window_set_size(PORT_W, PORT_H)
        
        // Set Views
        VIEW_W = GAME_W;
        VIEW_H = GAME_H;
    }
    else{ //Doesn't work exactly
        PORT_W =  640
        PORT_H =  1136 
        // Disable Auto Draw for App Surface 
        application_surface_draw_enable(0);
        surface_resize(application_surface,PORT_W,PORT_H);
        //window_set_fullscreen(1);
        window_set_size(PORT_W, PORT_H)
        //global.MonitorW= display_get_width();   
        //global.MonitorH= display_get_height();
        global.MonitorW= 2880//display_get_width();   
        global.MonitorH= 1620//display_get_height();
        global.Dis_Xoffset=(global.MonitorW-PORT_W)/2;     
        global.Dis_Yoffset=(global.MonitorH-PORT_H)/2;
        instance_create(x,y, obj_control_app_surface);
    }
    
    
    //Window width/height is set in the first menu room.  It is not decided by display height/width
    ASPECT =  PORT_W / PORT_H//window_get_width() / window_get_height()
    //PADDING = true;
}

// Pad Empty Space
if PADDING {
    //Skinnier than our default ASPECT
    if ASPECT &lt; 640 / 1136 
    {
        VIEW_W = GAME_W;
        VIEW_H = VIEW_W / ASPECT;
    
    }
    //Fatter than our default ASPECT
    else if ASPECT &gt; 640 / 1136 
    {
        VIEW_H = GAME_H
        VIEW_W = ASPECT * VIEW_H;
    }
    // No scaling required 
    else {
        VIEW_W = GAME_W;
        VIEW_H = GAME_H;
        PADDING = false;
    }
    
}

//Stretch wrong aspect ratio
if STRETCHING{
    window_set_size(PORT_W,PORT_H);
}




// Set Room Size  
room_width = VIEW_W;
room_height = VIEW_H;
//Set Views for First Room (Since it Doesn't Work via the loop without a room_restart)
view_wview = VIEW_W
view_hview = VIEW_H
view_wport = PORT_W;
view_hport = PORT_H;
//Set Global Game Coordinates
VIEW_X = 0//(room_width - VIEW_W) div 2;
VIEW_Y = 0//(room_height - VIEW_H) div 2;
GAME_X = VIEW_X + (VIEW_W - GAME_W) div 2;
GAME_Y = VIEW_Y + (VIEW_H - GAME_H) div 2;

/*NB:  To do our own scaling as described here: http://gmc.yoyogames.com/index.php?showtopic=655565
we would need to scale the room according to the display ration
and then make the view the same size as the room
but make the port the same size as the display
and then set the game x/y accordingly
then game width/height would stay the same.



*/


// Set the views in All Rooms
var rm;
rm = room;//rm_menu//room_next(room)
// Loop Through Each Room
while (true)
{
    // Set Width params
    room_set_width(rm,VIEW_W);
    room_set_height(rm,VIEW_H);
    //http://i.imgur.com/eABpC.png diagram of room_set_view  //We use 768 instead of 640 for cropping stuff
    // Set View Params
    room_set_view(rm, 0, true, 
        VIEW_X, VIEW_Y, 
        VIEW_W, VIEW_H,
        0, 0, 
        PORT_W, PORT_H, 
        0, 0, -1, -1, -1);
    // Enable Views    
    room_set_view_enabled(rm,true);
    
    //If This is Last Room, break iteration.
    if rm == room_last {
        break;
    }
    else{
        rm = room_next(rm);
    }
    
}


// Set Global Room Center

globalvar GAME_MID_X, GAME_MID_Y;
GAME_MID_X = GAME_X + GAME_W/2
GAME_MID_Y = GAME_Y + GAME_H/2

// Set Root Units Global
globalvar RU;
RU = 1//GAME_W / GAME_WIDTH_ORIGINAL;

</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Draw Optimizations

globalvar GAME_IS_HTML5;
// If Not HTML
if os_browser == browser_not_a_browser {
    GAME_IS_HTML5 = false;
        
    // Set Display (not available on HTML5)F
    display_reset(0, false);
    /* NB:Evaluate me, it's supposed to keep android phone cooler.
        I'm not seeing a big difference but I may as well leave it.
    */
 
} else {
    GAME_IS_HTML5 = true;
    //sprite_set_cache_size(s_v_star_white, 8)
    // Allow more font cache for these frequently colored fonts
    font_set_cache_size(fnt_menu_in_game, 8);
    font_set_cache_size(fnt_menu_buttons, 8);
}


// This Shader Helps Performance
//CreateInstanceIfNone(0,0,obj_shader_begin);
//CreateInstanceIfNone(0,0,obj_shader_end);
/* NB: The pass through shader seems to help but it adds 2 swaps on android.


*/

/*

// Disable app surf draw    
application_surface_draw_enable(false);
//Reenable App Surface
application_surface_enable(1); 
surface_resize(application_surface,PORT_W,PORT_H) 

//Disable Views
var rm;
rm = rm_menu//room_next(room)
// Loop Through Each Room
while (true)
{   
    // Disable Views
    //room_set_view_enabled(rm,0);
    
    //If This is Last Room, break iteration.
    if rm == room_last {
        break;
    }
    else{
        rm = room_next(rm);
    }
    
}

/*
// Clear HTML5 Screen Each Step
if os_browser != browser_not_a_browser {
    visible = 1;
}
NB: This didn't really seem to help or fix anything.



/* 
All of this is as per recommendations in the techblog here: 
https://www.yoyogames.com/tech_blog/61


*/
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Set Room Speed and Init Particles

// Var Declarations
globalvar
RMSPD_OPTIONS,
RMSPD_OPT_INDEX,
RMSPD_DEFAULT,
RMSPD_DELTA;

var i = -1;
RMSPD_OPTIONS[++i] = 30;
//RMSPD_OPTIONS[++i] = 45; 
    //NB: Not an even number, messes up lots of step wise code e.g. particles can't spawn every 1.5 steps..
RMSPD_OPTIONS[++i] = 60;

// Set Room Speed
var toggle_default;
// Detect if Android
if os_type == os_android { 
    // Toggle Low FPS On
    opt_default = 0;
}
// Detect if HTML5
else if os_browser != browser_not_a_browser{
    // Use Normal FPS
    opt_default = 1;
}
else {
    // Use Normal FPS
    opt_default = 1;
}
ini_open("savedata.ini");
    RMSPD_OPT_INDEX = clamp(
                        ini_read_real("settings", "RMSPD_OPT_INDEX", opt_default),
                            0,array_length_1d(RMSPD_OPTIONS)-1);
ini_close();



// Set Room Speed
scr_main_set_room_speed()

//Init Particles
scr_part_systems_init()

// Set Epsilon for Floating Point Equivalence
//math_set_epsilon(0.0001); 


</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Sound, Colors, Swipe/Controls Init

//Sounds
scr_sounds_init()

//TouchPad Controls
scr_tp_init();//2 //3 

/* TP Constants:
 *() = default
 * 0 = no touchpad
 * 1 = touchpad on mobile
 * 2 = touchpad on pc for testing, no os_is_paused checking
 * 3 = fake touchpad on pc for capturing footage
 */
 


//Create Color Controler NB: Must be spawned for subsequent events e.g. unlockables data
instance_create(x,y, obj_control_colors)

//Create Swipe Controler
instance_create(x,y, obj_control_swipe)



</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Data Init, URLs, Everyplay, Share, Monetization

globalvar 
PREMIUM, 
enableVC;

enableVC = 1;
PREMIUM = false;

// Field Data Init
scr_field_data_init();

/// Ads Init
ads_gamestart();

// Leaderboards Init
leaderboards_gamestart();

// Everyplay 
scr_everyplay_init();

// Game Data Init
scr_game_data_init();

//Set URL Globals
set_promotion_urls_gamestart();

// Share Screenshot
scr_share_gameplay_screen_init();



</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Settings and Analytics

//Load PlayerID
ini_open("savedata.ini");

global.playerID = ini_read_real("settings", "playerID", 0)

//If we didn't find one generate a new one
if global.playerID == 0{
   randomize();
   global.playerID = irandom(900000000)
   
   ini_write_real("settings", "playerID", global.playerID);
}

globalvar ANALYTICS;
ANALYTICS = 0;


//Set API Key for Flurry based on platform
//Android Key
if os_type == os_android{
   global.analyticsKey = "7VJPCTC9JGPMHKGC3TNT"; 
   global.ana_platform = "Android";
   global.ana_type = 1;
}
//iOS key
else if os_type == os_ios{
   global.analyticsKey = "9QKQYMCWZFKGZB3RXMDD"; 
   global.ana_platform = "iOS";
   global.ana_type = 1;
}
//HTML key
else if os_browser != browser_not_a_browser{
   global.analyticsKey = "5STTYCCFKDGCQ4QTX3ST"; 
   global.ana_platform = "HTML5";
   global.ana_type = 2;
   //NB:  We haven't integrated the HTML SDK unfortunately.
   // I think we'd need to make that ourselves?  via javascript..
   // It seems straight forward enough tbh.
}
//Default
else{
    global.analyticsKey = "";
    global.ana_platform = "other";
    global.ana_type = "";
}

if global.analyticsKey != ""{ 
   FlurryAnalytics_Init( global.analyticsKey );
   ANALYTICS = 1;
   // Create Analytics Object
   ScheduleScript(id,false,1,CreateInstanceIfNone,x,y,obj_control_analytics)
}

globalvar ana_GP, ana_GS;
//OS GamePaused related variables
ana_GP[0] = 0;                         // gamesplayed since os_paused, reset to zero after send
ana_GP[1] = 0;                         // time since os_paused, use ( get_timer() - ana_GS[1] ) / 1000000 (this must be called first)
ana_GP[2] = 0;                         // playtime since os_paused, use += lastPlaytime / room_speed each save stats call but then reset to zero
ana_GP[3] = 0;                         // number of interstitials ads since os_paused (increment in the show interstitial code) then reset to zero
ana_GP[4] = ini_read_real("analytics", // number of gamestarts
            "gamestarts",0) + 1;
//Save Updated Gamestarts
ini_write_real("analytics","gamestarts", ana_GP[4]);
            
                   
//GameStart related variables
ana_GS[0] = 0;                         // gamesplayed since gamestart
ana_GS[1] = 0;                         // time since gamestart, use get_timer() / 1000000
ana_GS[2] = 0;                         // playtime since gamestart, use += lastPlaytime / room_speed each save stats call
ana_GS[3] = 0;                         // number of interstitials ads since gamestart (increment in the show interstitial code
ana_GS[4] = 0;                         // number of os_pauses, increment by 1 before each send



globalvar ana_roomtimes; 
ana_roomtimes[0] = ini_read_real("room_visits","menu", 0);
ana_roomtimes[1] = ini_read_real("room_visits","stats", 0);
ana_roomtimes[2] = ini_read_real("room_visits","options", 0);
ana_roomtimes[3] = ini_read_real("room_visits","game", 0);
ana_roomtimes[4] = ini_read_real("room_visits","other", 0);





ini_close();

//I could maybe do push notifications to give Virtual currency or something.
//Or maybe daily games build streaks that unlock stuff.
//push_local_notification(fire_time, title, message, data);
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Game Vars,
globalvar
GAME_PAUSE, 
RETURN_TO_PAUSE,
PAUSE_RESUME, 
LAST_ROOM, 
NEW_GAME, 
RESTART_GAME,
GAMEOVER, 
score_p1,
score_p2,
score_p3,
score_p4,
level,  
MOVE_ACTIVE, 
GAME_ACTIVE, 
BOARD_INIT_COUNT,
MOVE_READY,
PADDLE_MOTION,
TUTORIAL_ENABLED,
PADDLE_TEXTURES,
PRIZE_WHEEL_COST,
GAME_START,
RESOURCE_POOLING,
CASH_STR;



GAME_PAUSE = false
PAUSE_RESUME = false // used to adjust touchpad after resuming from pause screen
RETURN_TO_PAUSE = false;

LAST_ROOM = rm_menu
NEW_GAME = true; //false
RESTART_GAME = false
GAMEOVER = false;
GAME_START = true;

MOVE_ACTIVE = false;
GAME_ACTIVE = false;
BOARD_INIT_COUNT = 0;

CASH_STR = "¢";//"$"

///Tutorial stuff
TUTORIAL_ENABLED=false; //this is declared in the file load vars
PADDLE_MOTION = true;
MOVE_READY = false;


///Paddle textures
PADDLE_TEXTURES[0] = sprite_get_texture(s_v_background_solid,0);//sp_white_32

GAME_STARTED = true;

PRIZE_WHEEL_COST = 100;


// Debugging
unlockEverythingCounter = 0;

/// Use Resource Pooling Objects?
RESOURCE_POOLING = false;

</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Time Keeping Data


globalvar
STEP, 
FULL_SECOND_LERP,
FULL_SECOND_SINE,
FULL_SECOND_COUNTER,
FULL_SECOND_INTERVAL,
HALF_SECOND_INTERVAL,
QUARTER_SECOND_INTERVAL,
TENTH_SECOND_INTERVAL,
ALTERNATE_STEP_INTERVAL,
DELTA_TIME_EXPECTED,
DELTA_TIME_SCALAR;


STEP = 0;
FULL_SECOND_COUNTER = 0;
FULL_SECOND_LERP = 0;
FULL_SECOND_INTERVAL = 0;
HALF_SECOND_INTERVAL = 0;
QUARTER_SECOND_INTERVAL = 0;
TENTH_SECOND_INTERVAL = 0;
ALTERNATE_STEP_INTERVAL = 0;


// Delta Time
DELTA_TIME_EXPECTED = 1000000/room_speed;
DELTA_TIME_SCALAR = 1;




</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Deflector Data





//Init Power Arrays
scr_powers_data_init(); //add new power arrays here

//Init Deflector Data
scr_deflector_data_init()

//Set Powers Data
scr_powers_data_set()

/* NB: To add a new power, first add all the info here, then add the sprite to obj_reflector_parent, 
then add the code to the obj_falling_powers, then add the time duration and step code to the obj_control_powerups
*/




image_speed = 0
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Debugging




/*
// for each grid
for (var i = 0; i &lt; 4; i++) {
    // calculate proportion of paddle to rail length
    var tmp = scr_calc_rail_and_paddle_lengths(i);
    show_message(string(tmp));
}



/*
arr[2,2] = 0;
var myVar = arr[2,3];

show_message(string(myVar));

/*

ScheduleScript(id,false, 0, ShowMessage, "no duration schedule success");
    NB: Awesome, schedulers also work with zero duration.  Nice.
    So you can do that if you want something to happen after a whole event processes.
/*
var tmp = TweenFire(id, "", EaseLinear, TWEEN_MODE_ONCE, true, 0, 0, 0, 1);
TweenAddCallback(tmp, TWEEN_EV_FINISH, id, ShowMessage, "null tween success");
    NB: Awesome, null tweens work great as advanced schedulersbacks.
        with call callbacks, we could use them as more advanced schedulers.

/*
var arr;
arr[0] = 0;
var tmp = TweenFire(id, arr, EaseLinear, TWEEN_MODE_ONCE, true, 0, 0, arr[0], 1);
TweenAddCallback(tmp, TWEEN_EV_FINISH, id, ShowDebugArray, arr);
    NB: Unfortunately a tween won't change value without any duration.... you need at least 1. 


//jso_test_all()

/*
var grid = ds_grid_create(1,1);

var list = grid[# 0, 2];

var listSize = ds_list_size(list);

var obj = list[| 0];

//NB: Wow so the above will just silently run through and cause all kinds of havoc.  Very unsafe.

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="72">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Clear Screen for HTML5


var clearSpr = scr_return_solid_sprite(0)//GAME_ACTIVE and room == rm_game);
draw_sprite_stretched_ext(clearSpr,0,VIEW_X,VIEW_Y,VIEW_W,VIEW_H,COLORS[6],1);

/*  NB: I found this really just didn't work.  HTML would still strobe.
*/
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="64">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Draw GUI: Draw App Surface (disabled)
/*
shader_set(sh_pass_noalpha);
texture_set_interpolation(false);
draw_set_alpha_test(false);
draw_clear(COLORS[0]);
draw_surface_stretched(application_surface, 0, 0, PORT_W, PORT_H);
draw_set_alpha_test(true);
texture_set_interpolation(true);
shader_reset()


</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
