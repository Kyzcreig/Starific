<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>0</visible>
  <depth>-2000</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///create event : force x/y value to be in a visible place
x = GAME_X + 25;
y = GAME_Y + 750+120;
t = "none";

image_speed = 0

visible = false;
//debug = false
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// STEP event : track mouse coordinates, and convert them to
// your grid coordinates
if visible {
    var xx, yy;
    xx = round((mouse_x-ox -cellW/2) / cellW)
    yy = round((mouse_y-oy -cellW/2) / cellH)
    t = string(xx)+","+string(yy)+", "
    if (xx &gt;= 0 and xx &lt; fieldW and yy &gt;= 0 and yy &lt; fieldH){
        var curCell = global.FIELD_OBJECTS[# xx,yy] ;
        if curCell&gt; DENSITY{
           if instance_exists(curCell){
              t = t+object_get_name(curCell.object_index)+': '+string(curCell)
           }
           else{
              t = t+'null, ';
           }
        }
        if curCell == noone {
            t = t +'noone';
        }
        else if curCell - DENSITY * fieldDensity &lt; 10 {
            t = t + 'null (corner): '+string(curCell)
        }
        else if curCell- DENSITY * fieldDensity &lt; 1000 {
            t = t+ 'respawning: '+string(curCell - DENSITY * fieldDensity)
        }
        
        //t = t + ", inEmpties="+string(scr_field_empty_find ds_list_find_index(global.empties,xx+yy*fieldW));
    }    
    //else t = 'false'
    // that's where I define the text that will be shown
    else t = t+ "null"; 
    


}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="6" enumb="55">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///enable debugging: alt+middle mouse


if keyboard_check(vk_alt)
{
    keyboard_clear(vk_alt)
    //debug = !debug
    visible = !visible

}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="73">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Draw debug

draw_set_color(COLORS[0])
draw_set_font(fnt_menu_bn_12_bold)
draw_set_halign(fa_left)
draw_set_valign(fa_top)
//scr_align_text()
var ia = instance_number(all);
var ir = instance_number(obj_reflector_parent);
var fi = (BOARD_TOTAL*fieldDensity);

draw_text(x,y-80,'port_w:'+string(view_wport[0])+string(', port_h:'+string(view_hport[0]))
+string(', window_w:'+string(window_get_width()))+string(', window_h:'+string(window_get_height())));
draw_text(x,y-64,'INTRO_ANGLE'+string(INTRO_ANGLE)+string(' INTRO_RAD:'+string(INTRO_RAD)
+' INTRO_DIST: '+string(INTRO_DIST)+' INTRO_DUR:'+string(INTRO_DUR)+' INTRO_EASE:'+string(INTRO_EASE)));
draw_text(x,y-48,'reflectorparent count, total possible count:  '+string(ir)+',  '+string(fi*fieldSat));
draw_text(x,y-32,'field saturation % w/ spawn_counter &amp; sat '+string(((ir + SPAWN_COUNTER) * 100) / (fi*fieldSat))+'%');
draw_text(x,y-16,'field saturation % '+string((ir * 100) / (fi))+'%');
//draw_text(x,y+16,'paddle_id='+string(paddle_id));
draw_text(x,y,t); //draws grid coords and vals
//draw_text(x,y+16, );
draw_text(x,y+32,'CURRENT_SONG_TIME: '+string(CURRENT_SONG_TIME)+ 
', songname='+audio_get_name(CURRENT_SONG));
draw_text(x,y+48,'instance count: '+string(ia)
+ ', DENSITY: '+string(DENSITY)
+ ', railOverload: '+string(railOverload)
+ ', paddleCount: '+string(instance_number(obj_launcher)));
draw_text(x,y+64,'mouseangle='+string(mouseangle)+', NewMAFromCenter='+string(NewMAFromCenter));
draw_text(x,y+80,'THEME NAME=' + COLORS[SKIN_NAME_INDEX]+', index=' +string(CURSKIN))
/*draw_text(x,y+80,'TL='+string(time_left)
+'#TD='+string(time_decrement)
+'#TL/TD/RS='+string(time_left/time_decrement/room_speed)
+'#TM='+string(obj_control_game.time_max));*/

draw_set_color(c_white)
/*
draw_set_color(c_black)
var row_width = string_width('000,000 = 4500000')
for(i=0; i&lt;ds_list_size(global.respawns);i++){
     var rx = global.respawns[| i] mod fieldW;
     var ry = floor(global.respawns[| i]/fieldW);
     draw_text(GAME_X+10 +row_width*(i div 40),GAME_Y+100+20*(i mod 40),
     string(rx)+','+string(ry)+'='+string(global.FIELD_OBJECTS[# rx,ry]))

}
draw_set_color(c_gray)
draw_set_halign(fa_right)
var row_width = string_width('000,000 = 400')
for(i=0; i&lt;ds_list_size(global.empties);i++){
     var rx = global.empties[| i] mod fieldW;
     var ry = floor(global.empties[| i]/fieldW);
     draw_text(GAME_X+GAME_W-10 -row_width*(i div 40),GAME_Y+GAME_H-100-20*(i mod 40),
     string(rx)+','+string(ry)+'='+string(global.FIELD_OBJECTS[# rx,ry]))

}
//draw_text(x,y+64,'faster - slower '+string(faster - slower));
//if instance_number(obj_reflector_parent) &gt; 0 {draw_text(x,y+32,'spawn threshold: 960 %nonpowerups*1000: '+string(((instance_number(obj_reflector2)*1000) div instance_number(obj_reflector_parent))));}

//draw_text(x,y-32,'emptylaneX '+string(emptylaneX));
//draw_text(x,y-16,'emptylaneY '+string(emptylaneY));
draw_set_color(c_black)
draw_set_font(fnt_game_bn_20_black)
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints>
    <point>22,22</point>
    <point>22,22</point>
  </PhysicsShapePoints>
</object>
