<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>50</depth>
  <persistent>0</persistent>
  <parentName>obj_parent_dummy</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///ini vars
scene_alpha = obj_control_tutorial.tutorialTextTween[0];
//pass in the top and bottom on create
scene_top = 0//+sprite_gap; //grab this from creation
scene_bottom = GAME_Y+GAME_H;


//Calculate the x,y, of the fake wheel
wheel_x = GAME_MID_X;
wheel_y = (scene_top+scene_bottom)/2

wheelRot = 0;



var i = -1;
// Set Wheel Slices
sliceArray[++i] = scr_slice_data_create(3);
sliceArray[++i] = scr_slice_data_create(2);
sliceArray[++i] = scr_slice_data_create(1);
sliceArray[++i] = scr_slice_data_create(0);
sliceArray[++i] = scr_slice_data_create(3);
sliceArray[++i] = scr_slice_data_create(2);
sliceArray[++i] = scr_slice_data_create(1);
sliceArray[++i] = scr_slice_data_create(0);


</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="1" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string></string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Calculate scene params

scene_alpha = obj_control_tutorial.tutorialTextTween[0];




if !TUTORIAL_ENABLED or obj_control_tutorial.tutorialTitleTween[0] != 1 //or !tutorialActive[0]// 
{
    instance_destroy();
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="5">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///destroy

instance_destroy()
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Draw Scene

// Draw Wheel Back Circle
backWheel_x = wheel_x;
backWheel_y = wheel_y;
backWheel_scale = .45 * scene_alpha; //EVALUATE ME
backWheel_size = backWheel_scale * sprite_get_width(spr_prize_wheel_back_circle)
backWheel_alpha = scene_alpha//1;
draw_sprite_ext(spr_prize_wheel_back_circle, 0,
backWheel_x,backWheel_y,backWheel_scale,backWheel_scale,
wheelRot,COLORS[0],backWheel_alpha) 



// Draw Slices
for (var i = 0; i &lt; 8; i++) {
    // Set Slice Data
    sliceRot = i * 45 + wheelRot; 
    sliceSpr = spr_prize_wheel_slice_nogap_0degrees_gif//spr_prize_wheel_slice_gap_0degrees
    //NOTE: PNGs with transparency cause artifacts, use GIFs with transparency for such sprites instead.
    //if mouse_check_button(mb_right) sliceSpr = spr_prize_wheel_slice_nogap_0degrees_gif;
    //else sliceSpr = spr_prize_wheel_slice_gap_0degrees_gif;
    sliceData = sliceArray[i];
    sliceCol = sliceData[1]
    sliceWidth = backWheel_scale * sprite_get_width(sliceSpr);
    // Draw Slice 
    draw_sprite_ext(sliceSpr, 0, backWheel_x,backWheel_y,
    backWheel_scale,backWheel_scale,sliceRot,
    COLORS[sliceCol],backWheel_alpha) 
    // Set Slice Symbol Data
    sliceSymbol = sliceData[0]
    sliceSymbol_rot = sliceRot + 90;
    sliceSymbol_scale = .6 * backWheel_scale;
    sliceSymbol_rad =  sliceWidth * .7;
    sliceSymbol_x = backWheel_x + dcos(sliceRot) * sliceSymbol_rad;
    sliceSymbol_y = backWheel_y - dsin(sliceRot) * sliceSymbol_rad;
    // Draw Slice Symbol
    draw_sprite_ext(sliceSymbol, 0,sliceSymbol_x,sliceSymbol_y,
    sliceSymbol_scale,sliceSymbol_scale,sliceSymbol_rot,
    COLORS[6],backWheel_alpha) 
    
}  

// Draw Wheel Center
draw_sprite_ext(spr_prize_wheel_front_center, 0,
backWheel_x,backWheel_y,backWheel_scale,backWheel_scale,
wheelRot,COLORS[0],backWheel_alpha) 

// Set Wheel Flapper Params
flapper_spr = spr_prize_wheel_flapper;
flapper_scale = backWheel_scale;

flapper_x = backWheel_x
flapper_y_adj = sprite_get_width(flapper_spr) / 4 * flapper_scale;
flapper_y = backWheel_y - ( flapper_y_adj + backWheel_size / 2);

// Draw Flapper Wheel
draw_sprite_ext(spr_prize_wheel_flapper, 0,
flapper_x,flapper_y,flapper_scale,flapper_scale,
0,COLORS[0],backWheel_alpha) 
// Draw Wheel Flapper Center
draw_sprite_ext(spr_prize_wheel_flapper_center, 0,
flapper_x,flapper_y,flapper_scale,flapper_scale,
0,COLORS[5],backWheel_alpha) 

</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
