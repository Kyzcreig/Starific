<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>100</depth>
  <persistent>0</persistent>
  <parentName>obj_parent_dummy</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///ini vars


sprite_spr = s_v_pointer;

sprite_y_offset = sprite_get_yoffset(s_v_pointer);
sprite_h = sprite_get_height(s_v_pointer);
sprite_circle_top = (sprite_y_offset);
sprite_circle_bottom = (GAME_Y+GAME_H-(sprite_h - sprite_y_offset));
sprite_center_x = GAME_X+GAME_W/2;
sprite_center_y = (sprite_circle_top+sprite_circle_bottom)/2;
sprite_circle_rad = sprite_center_y - sprite_circle_top;

sprite_pointer_theta = 90;
sprite_theta = sprite_pointer_theta/(5*room_speed)*360; //5 seconds
sprite_x = sprite_center_x + dcos(sprite_theta)*sprite_circle_rad;
sprite_y = sprite_center_y+ dsin(sprite_theta)*sprite_circle_rad;

sprite_color = COLORS[0];

padPercent = 0;

theta_velocity = 1;


alarm[0] = 1;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="1" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//Reset paddle percentage
obj_control_tutorial.paddleMovePercent = 0;//abs(obj_control_game.tutorialPaddleMovePercent) * 100 / (360*1); 
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Set coordinates and increment angle

//sprite_circle_top = (text_y + text_h/4 + sprite_y_offset); set in create call
//sprite_circle_bottom = (GAME_Y+GAME_H-(sprite_h - sprite_y_offset));
//sprite_center_y = (sprite_circle_top+sprite_circle_bottom)/2;
//sprite_circle_rad = sprite_center_y - sprite_circle_top;

sprite_theta = sprite_pointer_theta/(5*room_speed)*360; //5 seconds
sprite_x = sprite_center_x + dcos(sprite_theta)*sprite_circle_rad;
sprite_y = sprite_center_y + dsin(sprite_theta)*sprite_circle_rad;

sprite_color = COLORS[0];
//Increment sprite_pointer after tween text complete
if obj_control_tutorial.tutorialTextTween[0] == 1{
    if padPercent != 100{
        sprite_pointer_theta += theta_velocity//.5//1;
       
    }        
    with (obj_control_game){
        if touchPad != 0 and !SWIPE and PADDLE_MOTION {
        
             tp_on_button[0] = 0;
             tp_dummy = true;
             
             dummy_mx = other.sprite_x; 
             dummy_my = other.sprite_y;
             
             centerSpd = 0.075//.1//.2
             NewMAFromCenter = darctan2(dummy_my-dynamicCenterY,dummy_mx-dynamicCenterX)
             
    
             dynamicCenterX += (other.sprite_center_x - dynamicCenterX) * centerSpd;//DCXdelta * centerSpd
             dynamicCenterY += (other.sprite_center_y - dynamicCenterY) * centerSpd; //DCYdelta * centerSpd
             
             oldMX = dummy_mx
             oldMY = dummy_my
        }
    }
   
}
else{
    if obj_control_game.tp_dummy = true obj_control_game.tp_dummy = false;
}

if !TUTORIAL_ENABLED or obj_control_tutorial.tutorialTitleTween[0] != 1 //or !tutorialActive[0]// 
{
    instance_destroy();
}

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="5">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///destroy

instance_destroy()
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Draw Hand pointer and %

scene_alpha = obj_control_tutorial.tutorialTextTween[0];

///Draw pointer fill and trail
draw_trail_swipe(sprite_x,sprite_y,80,8,sprite_color,s_v_background_solid_3d,true,scene_alpha);//60
if padPercent != 100 draw_sprite_ext(s_v_pointer_fill,0,sprite_x,sprite_y,1,1,0,COLORS[6],1);//scene_alpha

//Draw % paddle movement
draw_set_font(fnt_game_bn_40_bold);
/*
//Draw bigger font for touchpads
if touchPad{
    //draw_set_font(fnt_game_bn_26_black); //bigger font maybe
    draw_set_font(fnt_menu_bn_40_bold); //bigger font maybe
}
else {
    draw_set_font(fnt_menu_bn_40_bold);
}*/
draw_set_halign(fa_center);
draw_set_valign(fa_middle);
text_color = COLORS[0];
if obj_control_tutorial.paddleMovePercent &gt; 100{
   text_color = COLORS[1];
}
padPercent = min(100,floor(obj_control_tutorial.paddleMovePercent))
frame_text = string_format(padPercent,1,0)+"%"; //"total size" is a min size actually
frame_text_h = string_height(frame_text);

draw_text_colour(sprite_center_x,sprite_center_y,frame_text,//centerfieldx, centerfieldy
text_color,text_color,text_color,text_color,scene_alpha);


///Draw pointer outline
if padPercent != 100 draw_sprite_ext(s_v_pointer,0,sprite_x,sprite_y,1,1,0,sprite_color,scene_alpha);


//Draw "subtext"
draw_set_font(fnt_game_calibri_25_bold);
text_color = COLORS[0];
sub_txt_h = string_height("S")
sub_txt_y = sprite_circle_bottom// - sub_txt_h/2//sprite_center_y+frame_text_h;
if padPercent == 100{
    
    var sub_text = "Tap anywhere to continue"
    /*if !TouchControls{
        sub_text = "Select Anywhere to Continue"
    }*/
    draw_text_colour(sprite_center_x,sub_txt_y,sub_text,//centerfieldx, centerfieldy
    text_color,text_color,text_color,text_color,scene_alpha);
}
else{
    var sub_text;
    //sub_text = "Adjust at Options-&gt;Game."//"virtual joystick"
    sub_text = "It follows where you touch."//"virtual joystick"
    //sub_text = "It's like a joystick.";
    if !TOUCH_ENABLED{
        sub_text = "It's like a joystick."
    }
    
    draw_text_colour(sprite_center_x,sub_txt_y,sub_text,//centerfieldx, centerfieldy
    text_color,text_color,text_color,text_color,scene_alpha);
    

}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
