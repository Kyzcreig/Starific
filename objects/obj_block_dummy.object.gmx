<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>50</depth>
  <persistent>0</persistent>
  <parentName>obj_parent_dummy</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///ini vars
scene_alpha = obj_control_tutorial.tutorialTextTween[0];
//pass in the top and bottom on create
scene_top = 0//+sprite_gap; //grab this from creation
scene_bottom = GAME_Y+GAME_H;

//Calculate the x,y, of the fake paddle
paddle_x = GAME_X+GAME_W/2;
//i'll need about 120 for the cooldown icon so it has breathing space
paddle_y = scene_bottom -60;//- 160;
paddle_w = 256;
paddle_h = PADDLE_H;

//Duration of star flying
durProjEnter = 2*room_speed;
durProjExit = 2*room_speed;
//Duration until reloop
durCooldown = 2*room_speed;
//Time counter
durTimer = 0;
durTotal = durProjEnter+durProjExit+durCooldown;

paddle_jiggler = 0;

proj_spr = object_get_sprite(obj_star);
proj_spr_h = 8/5*cellH; //1.6* cellheight
proj_scale = proj_spr_h/sprite_get_height(proj_spr)

proj_start_x = paddle_x
proj_start_y = scene_top + proj_spr_h/2
proj_end_y = proj_start_y//scene_top - proj_spr_h; //grab this from tutorial
proj_x = proj_start_x;
proj_y = proj_start_y;

proj_speed = (scene_top - proj_end_y) / durProjEnter //negative (passed in from obj_control_tutorial
proj_dir = 270;
proj_rot = 0;//(proj_dir +270) mod 360;

proj_state = 2; //0=entering projectile, 1= exiting, 2= relooping

proj_spr_color = COLORS[0];

//Tween vars
ProjScale[0] = 0;
ProjTween1 = noone;
ProjTween2 = noone;
ProjTDur = .10; //seconds



</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///projectile particle create

proj_particle = part_type_create();
part_type_sprite(proj_particle,proj_spr,0,0,0);
part_type_size(proj_particle,1,1,-0.005*RMSPD_DELTA,0*RMSPD_DELTA);
part_type_scale(proj_particle,proj_scale,proj_scale);
part_type_color1(proj_particle,c_white);
//part_type_color2(proj_particle,COLORS[0],COLORS[6]);
part_type_alpha2(proj_particle,1,0.2);
//part_type_speed(proj_particle,1*RMSPD_DELTA,1*RMSPD_DELTA,0*RMSPD_DELTA,0*RMSPD_DELTA);
//part_type_direction(proj_particle,0,359,0*RMSPD_DELTA,0*RMSPD_DELTA);
//part_type_gravity(proj_particle,0*RMSPD_DELTA,270);
part_type_orientation(proj_particle,0,0,0*RMSPD_DELTA,0*RMSPD_DELTA,1);
part_type_life(proj_particle,durProjEnter/1.8,durProjEnter/1.8);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="1" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///particle death and garbage collect particle

if part_type_exists(proj_particle)
{
   var gc_array = 0;
   gc_array[0] = proj_particle;
   gc_array[1] = 1*room_speed;
   ds_list_add(global.GC_particles,gc_array);
}

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Calculate scene params

scene_alpha = obj_control_tutorial.tutorialTextTween[0];




if scene_alpha == 1{    
    
    //Initialize random power object for scene
    if durTimer == 0{
        proj_y = proj_start_y;
        proj_state = 0;
        
        
    }
    
    //Increment scene timer
    durTimer = (durTimer + 1) mod (durTotal);
    
    //Particle trail
    if proj_state &lt; 2{
        var partCount = 20;//how many particles during scene?
        var partMod = round(durProjEnter/partCount); 
        if (durTimer mod partMod) == 0 {
            //Create particle
            part_particles_create_colour(PSYS_FIELD_LAYER,proj_x,proj_y,
            proj_particle,proj_spr_color,1);
        }
    }
    
    //Advance scene and spawn particle effects
    if proj_state == 0{ //durTimer &lt;= durProjectile and durTimer &gt; 0{
        proj_y += proj_speed;
        
        if durTimer &gt;= durProjEnter and proj_state == 0{
            proj_state = 1;
            //Fire Collision Tween
            ProjTween1 = TweenFire(id,ProjScale,EaseLinear,
                                TWEEN_MODE_ONCE, true,0,ProjTDur,0,1);
            ProjTween2 = TweenCreate(id,ProjScale,EaseLinear,
                                TWEEN_MODE_ONCE, true,0,ProjTDur,1,0);
            TweenAddCallback(ProjTween1,TWEEN_EV_FINISH,id,TweenPlay,ProjTween2);
            TweenDestroyWhenDone(ProjTween2,true,false);

        }
    }
    else if proj_state == 1{ //durTimer &lt;= durProjectile and durTimer &gt; 0{
        proj_y -= proj_speed;

        
        if durTimer &gt;= durProjEnter+durProjExit and proj_state == 1{
            proj_state = 2;
            //Death Particle effect 
            if false
                part_particles_create_colour(PSYS_SUBSTAR_LAYER, x, y, p_catch,proj_spr_color,200);

        }
    }

}


if !TUTORIAL_ENABLED or obj_control_tutorial.tutorialTitleTween[0] != 1 //or !tutorialActive[0]// 
{
    instance_destroy();
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="5">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///destroy

instance_destroy()
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Draw Scene


//Draw Paddle
var sp_xscale = paddle_w / 128;
var sp_yscale = PADDLE_H / 128;

draw_sprite_ext(s_v_background_solid,0,paddle_x-paddle_w/2, paddle_y,
sp_xscale, sp_yscale, 0, COLORS[0],scene_alpha);


//Draw Projectile
if proj_state &lt; 2 {

    var proj_scl = proj_scale * (1 + .25*ProjScale[0]);
    part_type_scale(proj_particle,proj_scl,proj_scl);




    //draw deflector
    draw_sprite_ext(proj_spr,0,proj_x, proj_y,
    proj_scl, proj_scl, proj_rot, proj_spr_color,scene_alpha);
    
    //so one way to go about this is to draw a small square of background color
    //where the shooter is supposed to disappear
    //then it will natural appear to fade out
    //but we can try this normally first and see how it goes
}
/*
if proj_state &gt;= 1{



}


</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
