<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>50</depth>
  <persistent>0</persistent>
  <parentName>obj_parent_dummy</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///ini vars
scene_alpha = obj_control_tutorial.tutorialTextTween[0];
//pass in the top and bottom on create
scene_top = 0//+sprite_gap; //grab this from creation
scene_bottom = GAME_Y+GAME_H;

deflector_w = cellSize//32;
deflector_scale = deflector_w/sprite_get_width(obj_reflector_parent_basic); //1.6* cellheight

row_size = round(gridSize * .75)
row_width = row_size*deflector_w;
row_center = ceil((row_size-1)/2);
deflector_array = noone;
for (var i = 0; i&lt; row_size; i++){
    deflector_array[i] = noone;
}

deflector_start_x = GAME_X+GAME_W/2 - row_width/2+deflector_w/2;
deflector_x = deflector_start_x;
deflector_y = (scene_top + scene_bottom)/2

//so maybe I create the reflectors but set symdraw to false and set their scale up
//using with ()


//Duration of star approach
durProjEnter= 3*room_speed;
//Duration until reloop
durProjExit = 4*room_speed;
//Time counter
durTimer = 0;
durTotal = durProjEnter+durProjExit;
proj_state = 1; //0=begin, 1=  end

/*
//if middle cell force spawn a line bomb


deflector_index = 0;
deflector_col = power_type_colors(deflector_index,0);

deflector_tween[0] = 0;
//Calculate the x,y, of the fake deflector
deflector_x = GAME_X+GAME_W/2;
deflector_y = scene_top -deflector_h/2;



proj_spr = object_get_sprite(obj_star);
proj_spr_h = 8/5*20; //1.6* cellheight
proj_scale = proj_spr_h/sprite_get_height(proj_spr)

proj_start_x = deflector_x
proj_start_y = scene_bottom-proj_spr_h/2
//proj_end_y = scene_top - proj_spr_h; //grab this from tutorial
proj_x = proj_start_x;
proj_y = proj_start_y;

proj_speed = (deflector_y - proj_start_y) / durProjEnter //negative (passed in from obj_control_tutorial
proj_dir = 90;
proj_rot = 0;//(proj_dir +270) mod 360;
proj_turn_sign = 1;

proj_spr_color = COLORS[0];


</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="1" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///particle death and garbage collect particle

for (var i = 0; i&lt; row_size; i++){
    if instance_exists(deflector_array[i]){
        with (deflector_array[i]){
            particleDeath = false;
            instance_destroy();
        }
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Calculate scene params

scene_alpha = obj_control_tutorial.tutorialTextTween[0];




if scene_alpha == 1{    
    
    //Initialize random power object for scene
    if durTimer == 0{
        proj_state = 0;
        deflector_x = deflector_start_x;
        
        //Populate Row with deflectors
        for (var i = 0; i &lt; row_size; i++){
            var objToSpawn = noone;
            
            
            //Spawn Bomb in middle
            if i == row_center{
                objToSpawn = obj_powerup_parent_bomb;
            
            }
            //Else spawn anything
            else if random(1) &lt; .6{
                objToSpawn = choose(obj_reflector_parent_basic,obj_reflector_parent_basic,
                             obj_reflector_parent_basic,obj_powerup_parent_ups,
                             obj_powerup_parent_downs,obj_powerup_parent_neutral,
                             obj_powerup_parent_bomb);
            }
            if objToSpawn != noone{
                //deflector_array[i] = instance_create(deflector_x,deflector_y,objToSpawn);
                
                deflector_array[i] = scr_spawner_create(deflector_x,deflector_y,objToSpawn);
                /*
                with (deflector_array[i]){
                     // Disable Pooling For These Reflectors
                     pooling = false;
                }*/
            }
            
            deflector_x += deflector_w
        
        }
        
        
    }
    
    //Increment scene timer
    durTimer = (durTimer + 1) mod (durTotal);
    

}

//Advance Scene
if proj_state == 0 and ((scene_alpha == 1 and durTimer &gt;= durProjEnter) or (scene_alpha != 1)){

    proj_state = 1;
    
    //Detonate Bomb
    with(deflector_array[row_center]){
        //instance_destroy()
        event_user(15);
    }
    
    var index;
    //Detonate other deflectors
    for (var i=1, n=ceil(row_size/2); i &lt;= n; i++){
        
        //Left Side
        index = row_center-i;
        if index &gt;= 0{
           if instance_exists(deflector_array[index]){
              ScheduleScript(id,false,i,EventUser,deflector_array[index],15);
           }
           else{
              ScheduleScript(id,false,i,scr_bomb_particle_effect,deflector_start_x+deflector_w*index,deflector_y, 0);
           }
        }
        
        //Right Side
        index = row_center+i;
        if index &lt;= row_size-1{
           if instance_exists(deflector_array[index]){
              ScheduleScript(id,false,i,EventUser,deflector_array[index],15);
           }
           else{
              ScheduleScript(id,false,i,scr_bomb_particle_effect,deflector_start_x+deflector_w*index,deflector_y, 0);
           }
        
        }
    } 

}


if !TUTORIAL_ENABLED or obj_control_tutorial.tutorialTitleTween[0] != 1 //or !tutorialActive[0]// 
{
    instance_destroy();
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="5">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///destroy

instance_destroy()
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Draw Scene
/*
//Draw Deflector

if proj_state == 0{
    draw_sprite_ext(deflectors[deflector_index,0],0,deflector_x, deflector_y,
    deflector_scale*deflector_tween[0], deflector_scale*deflector_tween[0], 0, deflector_col,scene_alpha);
}


//Draw Star
if proj_state &lt;= 1 {
    draw_sprite_ext(proj_spr,0,proj_x, proj_y,
    proj_scale, proj_scale, proj_rot, proj_spr_color,scene_alpha);

}


</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
