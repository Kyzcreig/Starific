<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>-1100</depth>
  <persistent>0</persistent>
  <parentName>obj_text_generic</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Init with default values

birthStep = STEP //Set birth step for instance

// Set Speed stuff
speed = 0;
current_speed = 0;
top_speed = 0;
speed_dec = false;
speedmult = .9 //random(.15)+.85
// Float Direction
direction = 90; //float up

// Set Alarm
duration = 2*room_speed;
alarm[0] = duration; //2 seconds
alarm[1] = 2;

// Set Text Stuff
text = ""
font = fnt_game_bn_20_black


// Set Colors
image_blend = c_white
col = c_white //text color
colIndex = -1 //Used to overide color during color easing.



//Set Alpha Stuff
alpha = 1 //starting alpha
alpha_dec = false   //whether to fade text out
//alpha_multi = .99

// Set Outline Stuff
outline = false;
outlinewidth = 2


// Set Delete Stuff 
deleteOld = false; // can delete other objectgs
deleteAble = true; // can be deleted


// Set Contrast stuff
contrast_is_high = 0;
background_too_light = 0;


text_scale = 1;

// Alignment Overlap stuff
alignments = scr_align_text_popup(false);
w = 0;
wL = 0;
wR = 0;
h = 0;
hT = 0;
hB = 0;
mask_index = scr_text_get_mask(alignments[0],alignments[1]);

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="1">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Init text alignment and speed and outlining

current_speed = top_speed;
speed = current_speed * DELTA_TIME_SCALAR;
//contrast_is_high = scr_color_contrast_status(color,COLORS[6])//I decided too not use this
background_too_light = scr_text_set_outline(col, COLORS[6]);


// Alignment Overlap Params
draw_set_font(font)
w = max(0,string_width(text) * .5 - 2*RU)
h = max(0,string_height(text) * .5 - 2*RU)
    //NB: '-2' so text can touch

// Set Values to Add for X/Y Coordinate in Collision Detection
switch alignments[0]{

case fa_left:
    wL = 0; 
    wR = 2*w;
    break;

case fa_center:
    wL = -w; 
    wR = w;
    break;

case fa_right:
    wL = -2*w; 
    wR = 0;
    break;
}

switch alignments[1]{

case fa_top:
    hT = 0; 
    hB = 2*h;
    break;

case fa_middle:
    hT = -h;
    hB = h;
    break;

case fa_bottom:
    hT = -2*h; 
    hB = 0;
    break;
}


/// Set Mask Sprite
mask_index = scr_text_get_mask(alignments[0],alignments[1]);
// Stretch Mask Sprite
image_xscale = w/sprite_get_width(mask_index);
image_yscale = h/sprite_get_height(mask_index);



</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Destroy
instance_destroy();
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///prevent overlap w/ collision detection


if deleteOld or top_speed != 0
{
    // Set Speed
    speed = current_speed * DELTA_TIME_SCALAR;
    
    // Find Colliding Text Object
    __collided = collision_rectangle(x+wL,y+hT,x+wR,y+hB,obj_text_generic,false,true);
    // If Delete Other Text Enabled
    scr_avoid_overlap_static(__collided)
    // If Moving Text, try to make them not overlap
    scr_avoid_overlap_dynamic(__collided);
}


</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Draw Text


//draw_set_color(color);
draw_set_font(font);
draw_set_halign(alignments[0])
draw_set_valign(alignments[1])

/// Set Dynamic Color if colIndex is set
if colIndex != -1 {
    col = COLORS[colIndex];
}



//if !outline or (color_get_hsl_lightness(COLORS[6]) &gt; 75)
//If No outline or light background draw no outline
if !outline and !background_too_light //!contrast_is_high or 
   draw_text_ext_transformed_colour(x,y,text,-1, -1, 
            text_scale,text_scale, 0, col,col,col,col,alpha)
else{
   draw_text_outline_ext_transformed_color(x,y,string_lower(text),
   -1, -1, text_scale,text_scale, 0,col,col,col,col,alpha,outlinewidth,COLORS[6],4)
}


if alpha_dec
    //alpha *= alphamult; //decrease alpha each frame
    alpha = clamp((alarm[0]/duration)*2, 0, 1);
    //NB: This causes the text to be full alpha for the first half of its duration
    //NB: If We want the text to be full alpha a longer can increase the scalar we use from 2 up
if speed_dec{
    top_speed *= speedmult;
    speed *= speedmult; //decrease the speed a bit each frame
}
   


</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints>
    <point>22,22</point>
    <point>22,22</point>
  </PhysicsShapePoints>
</object>
