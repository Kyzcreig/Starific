<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Init


//Use Longer Ease Duration on Game Intro
var dur = 1;
/*
if GAME_START{
    GAME_START = false;
    dur *= 2;
}*/

// Ease In
mainEase[0] = 0;
mainTween = TweenFire(id, mainEase, EaseLinear,
                    TWEEN_MODE_ONCE, true, 0, dur, mainEase[0], 2);
mainSchedule = noone;

// SubEasers
subEase[0] = clamp(mainEase[0],0,1)
subEase[1] = clamp(mainEase[0]-0.5,0,1)
subEase[2] = clamp(mainEase[0]-1.0,0,1)





selected[0] = noone
selected[1] = true
popup_page[0] = 0 ;




//Text Arrays
menu[0] = 'starific'
menu[1] = 'arcade'
menu[2] = 'moves'
menu[3] = 'time'
menu[4] = "sandbox"

title_font = fnt_menu_title_95; 
title_txt = menu[0]

text_locked = false;

// Get Number of Unlocks for Options Indicator
var optionsCount;
ini_open("scores.ini");
    optionsCount = scr_unlock_is_new_count("0,2,3,4")
ini_close();


//Sprite Button Arrays
var i, j, k, n;
i = -1; j = -1; k = 3;
menu_button[++i,(++j)mod k] = s_v_options; //button sprite
menu_button[i,(++j)mod k] = 5; //button user_event index
menu_button[i,(++j)mod k] = optionsCount; //button indicator value

menu_button[++i,(++j)mod k] = s_v_feedback; //button sprite
menu_button[i,(++j)mod k] = 7; //button user_event index
menu_button[i,(++j)mod k] = 0; //button indicator value

if touchPad != 0{
    
    if PREMIUM == 0 { //DISABLED
        if ADS_FORCED == 1 menu_button[++i,(++j)mod k]  = s_v_noads //button sprite
        else  menu_button[++i,(++j)mod k] = s_v_deluxe  //button sprite
        menu_button[i,(++j)mod k] = 8; //button user_event index
        menu_button[i,(++j)mod k] = 0; //button indicator value
    }
}
else{
    menu_button[++i,(++j)mod k] = s_v_app//s_v_get; //button sprite
    menu_button[i,(++j)mod k] = 10; //button user_event index
    menu_button[i,(++j)mod k] = 0; //button indicator value

}

if LEADERBOARDS == 1{
    menu_button[++i,(++j)mod k] = s_v_leaderboards  //button sprite
    menu_button[i,(++j)mod k] = 9; //button user_event index
    menu_button[i,(++j)mod k] = 0; //button indicator value
}
menu_button[++i,(++j)mod k] = s_v_stats; //button sprite
menu_button[i,(++j)mod k] = 6; //button user_event index
menu_button[i,(++j)mod k] = 0; //button indicator value
//FOR DEBUGGING WHEEL
if 0 {   
    menu_button[++i,(++j)mod k] = s_v_wheel; //button sprite
    menu_button[i,(++j)mod k] = 11; //button user_event index
    menu_button[i,(++j)mod k] = STAR_CASH div 100; //button indicator value
}
//FOR DEBUGGING SHARE
if 0 {   
    menu_button[++i,(++j)mod k] = s_v_share; //button sprite
    menu_button[i,(++j)mod k] = 13; //button user_event index
    menu_button[i,(++j)mod k] = 0; //button indicator value
}


menu_jiggletime = 1.0*room_speed
for ( i = 0; i &lt; 15; i++ ){
    for (j=0;j&lt;3;j++){
        menu_jiggle[i,j] = 0;
    }
}


u_txt_x = 0;
u_txt_y = 0;





</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Clear Particles from Rm Game
if part_system_exists(PSYS_SUBSTAR_LAYER) {part_particles_clear(PSYS_SUBSTAR_LAYER)}
if part_system_exists(PSYS_FIELD_LAYER) {part_particles_clear(PSYS_FIELD_LAYER)}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Menu Swoosh Stuff (unused)

/*
menuSwoosh = false

if menuSwoosh {
    scr_sound(sd_menu_swoosh);
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="1" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Mark New Modes as Seen


//Save new view counts
scr_unlock_update_new_views("1"); //we use the to mark a new unlock as "viewed"
scr_unlock_update_views("1"); 
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///DRAW MENU AND TWEEN IN

/*

scr_assert_menuSurface_exists();
//surface_reset_target()
surface_set_target(global.menuSurface);
// If Popup prompt is in play
if popup_page[0] != 0 {
    draw_clear_alpha(COLORS[7],0);  // 0 alpha makes text more legible
}
else {
    draw_clear_alpha(COLORS[7],1);  // 1 alpha is needed to make popups look good
}

scr_menu_draw_main()



//Reset Surface
surface_reset_target()






</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="25">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Tween Scripts

mainTween = TweenFire(id, mainEase, EaseLinear,
               TWEEN_MODE_ONCE, true, 0, 1, mainEase[0], 0);



//Clear text popups
with(obj_text_generic){instance_destroy()};

//if menuSwoosh scr_sound(sd_menu_swoosh,1,false)
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="10">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Menu Choice Selected


var key;
switch selected[0]
{
    case 1: //Arcade         
        //Perform outro tweens
        event_perform(ev_other,ev_user15); 
        
        TweenAddCallback(mainTween,  TWEEN_EV_FINISH, id,
                ScheduleScript,obj_control_main, 0, 2, 
                        select_menu_choice, rm_game, true, 0)
        //TweenAddCallback(mainTween,  TWEEN_EV_FINISH, id,select_menu_choice, rm_game,true,1);
        
        break;
         
    case 2: //Moves
        if scr_unlock_get_status(1,1) != 0{
                        
            //Perform outro tweens
            event_perform(ev_other,ev_user15);  
        
            TweenAddCallback(mainTween,  TWEEN_EV_FINISH, id,
                    ScheduleScript,obj_control_main, 0, 2, 
                            select_menu_choice, rm_game, true, 1)
            //TweenAddCallback(mainTween,  TWEEN_EV_FINISH, id,select_menu_choice, rm_game,true,2);
        }
        //Spawn unlock criteria dialogue
        else{
            txt_font = fnt_menu_bn_26_italic//fnt_game_bn_20_black//fnt_menu_bn_40_bold;//fnt_game_bn_30_black;
            ini_open("scores.ini")
               txt_text = scr_unlock_criteria_text(scr_unlock_get_data(1,1)) + ""//" to unlock!";
            ini_close();
            draw_set_font(txt_font)
            txt_height = string_height(txt_text)/4;
            scr_popup_text_field_static(u_txt_x,u_txt_y+txt_height,
            txt_text,COLORS[2],txt_font,true,3*room_speed)
                 
            //Warning sound
            scr_sound(sd_menu_wrongclick,1,false)
            // Track Button Presses
            scr_button_locked_mode("moves")
            
            //Add Button Jiggle
            menu_jiggle[selected[0],0] = .5 * room_speed;
            
            //Clear Selection
            selected[0] = noone;
         }
         break;
         
    case 3: //Time
         if scr_unlock_get_status(1,2) != 0
         {
            
            //Perform outro tweens
            event_perform(ev_other,ev_user15);  
            
            TweenAddCallback(mainTween,  TWEEN_EV_FINISH, id,
                    ScheduleScript,obj_control_main, 0, 2, 
                            select_menu_choice, rm_game, true, 2)
            //TweenAddCallback(mainTween,  TWEEN_EV_FINISH, id,select_menu_choice, rm_game,true,3);
         }
         //Spawn unlock criteria dialogue
         else{
         
         
            txt_font = fnt_menu_bn_26_italic//fnt_game_bn_20_black//fnt_menu_bn_40_bold;//fnt_game_bn_30_black;
            ini_open("scores.ini")
               txt_text = scr_unlock_criteria_text(scr_unlock_get_data(1,2)) + ""//" to unlock!";
            ini_close();
            draw_set_font(txt_font)
            txt_height = string_height(txt_text)/4;
            scr_popup_text_field_static(u_txt_x,u_txt_y+txt_height,
            txt_text,COLORS[3],txt_font,true,3*room_speed)
                 
            //Warning sound
            scr_sound(sd_menu_wrongclick,1,false)
            // Track Button Presses
            scr_button_locked_mode("time")
            
            //Add Button Jiggle
            menu_jiggle[selected[0],0] = .5 * room_speed;
            
            //Clear Selection
            selected[0] = noone;
            
            /*
            //Open Feedback Prompt
            instance_create(x,y,obj_prompt_feedback_unlock);

            
            //Unlock Time Mode
            scr_unlock_set_status(1,2,2,true);
            //Play Unlock Sound
            //ScheduleScript(id, 0, 2, scr_sound,sd_gameover_unlock);
            //Schedule Prize Prompt
            var data = scr_unlock_get_data(1,2);
            var prize_name = data[5]+" "+data[6];
            prizeData = scr_prompt_prize_create_data(s_v_options_x2,0,
                            "unlocked!", prize_name, 2, 2, data, 0, "");
            ScheduleScript(id,0,5,scr_prompt_prize_spawn,prizeData);
            //NB: This is delayed 5 steps so it doesn't interupt the obj_control_main triggering the prompt
            
        
   
            //Warning sound
            //scr_sound(sd_menu_wrongclick,1,false) 
                //Disabled because not appropriate IMO for a rating request
            scr_button_locked_mode(3)
            
            
            //Clear Selection
            selected[0] = noone;
            */

         }
         break;
         
         
    case 4: //sandbox 
         if scr_unlock_get_status(1,3) != 0{
            
            //Perform outro tweens
            event_perform(ev_other,ev_user15);  
            
            
            TweenAddCallback(mainTween,  TWEEN_EV_FINISH, id,
                    ScheduleScript,obj_control_main, 0, 2, 
                            select_menu_choice, rm_game, true, 3)
            //TweenAddCallback(mainTween,  TWEEN_EV_FINISH, id,select_menu_choice, rm_game,true,4);

         }
         //Spawn unlock criteria dialogue
         else{
         
         
            txt_font = fnt_menu_bn_26_italic//fnt_game_bn_20_black//fnt_menu_bn_40_bold;//fnt_game_bn_30_black;
            ini_open("scores.ini")
               txt_text = scr_unlock_criteria_text(scr_unlock_get_data(1,3)) + ""//" to unlock!";
            ini_close();
            draw_set_font(txt_font)
            txt_height = string_height(txt_text)/4;
            scr_popup_text_field_static(u_txt_x,u_txt_y+txt_height,
                txt_text,COLORS[4],txt_font,true,3*room_speed)
                 
            //Warning sound
            scr_sound(sd_menu_wrongclick,1,false)
            // Track Button Presses
            scr_button_locked_mode("sandbox")
            
            //Add Button Jiggle
            menu_jiggle[selected[0],0] = .5 * room_speed;
            
            //Clear Selection
            selected[0] = noone;
            

         }
         break;
         
         
       
  
    case 5: //Options         
         
        //Perform outro tweens
        event_perform(ev_other,ev_user15);  
        
        TweenAddCallback(mainTween,  TWEEN_EV_FINISH, id,
                ScheduleScript,obj_control_main, 0, 2, 
                        select_menu_choice, rm_options)
        //TweenAddCallback(mainTween,  TWEEN_EV_FINISH, id,select_menu_choice, rm_options);
        break;
        
        
          
    case 6: //Stats 
         
        //Perform outro tweens
        event_perform(ev_other,ev_user15);  
        
        
        TweenAddCallback(mainTween,  TWEEN_EV_FINISH, id,
                ScheduleScript,obj_control_main, 0, 2, 
                        select_menu_choice, rm_stats)
        //TweenAddCallback(mainTween,  TWEEN_EV_FINISH, id,select_menu_choice, rm_stats); 
        
        break;

        
    case 7: //Feedback Button
        instance_create(x,y,obj_prompt_feedback_main);
         
        selected[0] = noone;
        break;

    case 8: //NO-ADS
    
         
        scr_button_deluxe();
        
        selected[0] = noone;
        break;

    case 9: //Show Leaderboards Mobile
    
        scr_button_leaderboards();
        
        
        selected[0] = noone;
        break;
    case 10: //html get
    
        scr_button_get();
         
        selected[0] = noone;
        break;
        
        
    case 11: //TEST Prize Wheel
    
        scr_button_prizeWheel();
         
        selected[0] = noone;
    break;

    //Exit Game for Android 
    //(and maybe other platforms later e.g. windows phone)
    case 12:
        // If Android
        if os_type == os_android {
            // Create Exit Prompt 
            instance_create(x,y,obj_prompt_confirm_exit);
            
        }
        selected[0] = noone;
    break;
    
    case 13: //TEST Mobile Share
    
        scr_share_mobile(true, false, "Just scored 1000!");
         
        selected[0] = noone;
    break;

}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="5">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Destroy


if TweenExists(mainTween) {
    TweenDestroy(mainTween);
}

instance_destroy()
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///DRAW MENU AND TWEEN IN

scr_menu_draw_main()
/*
scr_page_draw_surface(global.menuSurface)


</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
