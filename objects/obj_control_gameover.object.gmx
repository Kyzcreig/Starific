<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///gameover tweens, text &amp; colors, resurrect


//Tween for Fade, Tween for Slide-in
go_FadeTween[0] = 0
go_SlideTween2[0] = 0
go_SlideTween3[0] = 0
go_SlideTweenText[0] = 0
go_TweenFade = 0
go_TweenSlide2 = 0
go_TweenSlide3 = 0
go_TweenSlideText = 0

GAMEOVER = false;


go_selected[0] = noone;
go_selected[1] = true;
popup_page[0] = 0 ;

playHighScoreSound = 0;
//Set Display Stat Data
scr_go_init_stat_display()

//Gameover Rating Text
scr_go_set_gameover_rating_set_text();





//Create Lists for Holding Buttons and Dialogue Text
go_dialogue_txt = ds_list_create();
go_sp_buttons = ds_list_create();


// Init Sprite Wigglers
scr_wiggle_init(-1, 4*room_speed);



// Used for gameover dialogues...
//sp_end_y = GAME_Y + GAME_H * .85;
delayed_button_calls = scr_init_array_loop(0,25); //NB: We"ll need to update this as we add more functions...



//Menu Choice Text
go_menu[0] = "gameover"
go_menu[1] = "score: "
go_menu[2] = "restart"
go_menu[3] = "menu"


title_font = fnt_menu_title_95; 
title_txt = go_menu[0];




////////////////////////////UNLOCKABLES///////////////////////////////////

//Set up array of skin indexes
unlock_skins[0] = CURSKIN;
unlock_skins_cursor[0] = 0;

//Set up array of gridsize indexes
unlock_grids_cursor[0] = 0;
var j = -1; //for indexing array
for (var i = 0; i &lt; 4; i++ ){ 
    var key = scr_unlock_get_key(0,i);
    var data = UNLOCKS_DATA[? key];
    //if unlocked add to array
    if data[1] &gt;= 2 {
        unlock_grids[++j] = data[7]; 
    }
    //set cursor to current index
    if i == GRID{
        unlock_grids_cursor[0] = j;
    }
}


//Set up array of rigor indexes
unlock_rigors_cursor[0] = 0;
var j = -1; //for indexing array
for (var i = 0; i &lt; 4; i++ ){ 
    var key = scr_unlock_get_key(2,i);
    var data = UNLOCKS_DATA[? key];
    //if unlocked add to array
    if data[1] &gt;= 2 {
        unlock_rigors[++j] = data[7];  
    }
    //set cursor to current index
    if i == RIGOR{
        unlock_rigors_cursor[0] = j;
    }
}

//Set up array of rigor indexes
unlock_modes_cursor[0] = 0;
var j = -1; //for indexing array
for (var i = 0; i &lt; 4; i++ ){ 
    var key = scr_unlock_get_key(1,i);
    var data = UNLOCKS_DATA[? key];
    //if unlocked add to array
    if data[1] &gt;= 2 {
        unlock_modes[++j] = data[7];  
    }
    //set cursor to current index
    if i == MODE{
        unlock_modes_cursor[0] = j;
    }
}

unlock_count[0] = 0;
unlock_sound[0] = 1;
rate_prompt[0] = 0;

dialogue_max_display = 9//6;
dialogue_font = fnt_menu_bn_20_italic;//fnt_menu_bn_26_italic;
dialogue_count_adj = 0;

interstitals_requested = false;

index_adjust = 0;


</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="1" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///garbage collect

if ds_exists(go_dialogue_txt, ds_type_list){
    ds_list_destroy(go_dialogue_txt);
}

if ds_exists(go_sp_buttons, ds_type_list){
    ds_list_destroy(go_sp_buttons);
}

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Tween in Gameover Sequence


//Save Stats
with (obj_control_game) {
    scr_stats_save() //networking in this function
    //NB: Evaluate if this is a good spot to save
        // It might be better to wait until tween text slide is done.
}
        
//Set Display Values (So it runs after stat saves)
scr_go_set_stat_display();

//Set Rating Text (So it runs after stat saves)
scr_go_set_gameover_rating_set_index() //90*levelDiffAdj); //900*levelDiffAdj

// Save Gameplay Screenshot for Sharing
scr_share_screen_gameplay_save();

//NB: It might be even clear to add all this i/o to a callback after the gameover tween finishes.


// Set Gameover
GAMEOVER = true;


go_TweenFade = TweenFire(id, go_FadeTween,EaseInOutSine,
                    TWEEN_MODE_ONCE,true,0,.25,0,1);//EaseLinear 
        //Fade is 1 second to account for deflector particle effect detonations
go_TweenSlide2 = TweenCreate(id, go_SlideTween2,EaseOutBack,
                    TWEEN_MODE_ONCE,true,0,.25,0,1);
go_TweenSlide3 = TweenCreate(id, go_SlideTween3,EaseLinear,
                    TWEEN_MODE_ONCE,true,0,.25,0,1);
var TxtLen = (ds_list_size(go_dialogue_txt)+2)/2 //+.5;
var TxtDur = max(1/room_speed, min(TxtLen, 1) * .25);
go_TweenSlideText = TweenCreate(id, go_SlideTweenText,EaseLinear,
                    TWEEN_MODE_ONCE,true,0,TxtDur,go_SlideTweenText[0],TxtLen);
                    
TweenAddCallback(go_TweenFade,TWEEN_EV_FINISH,id,TweenPlay,go_TweenSlide2);
TweenAddCallback(go_TweenSlide2,TWEEN_EV_FINISH,id,TweenPlay,go_TweenSlide3);
TweenAddCallback(go_TweenSlide3,TWEEN_EV_FINISH,id,TweenPlay,go_TweenSlideText); 
            //NB: go_TweenSlide3 is referenced by show interstitial thing down below
// Schedule Rate Prompt
if rate_prompt[0] { 
    TweenAddCallback(go_TweenSlideText,TWEEN_EV_FINISH,id,
                ScheduleScript,obj_control_main,false,2,
                    CreateInstance,x,y,obj_prompt_feedback_gameover); 
    rate_prompt[0] = false;
} 
// Schedule Interstitial on Gameover
else if ADS_INTERSTITIALS != "" and 
        ADS_INTERSTITIAL_CACHED and 
        ADS_FORCED != 0
{
    //Adaptive Prompting: Display Ads under following conditions
    var vetPlayer = 1//careerPlaytimeTotal &gt; 60*60*4 - lastPlaytime;
    if ( vetPlayer and gamesPlayed mod 2 == 0)//4 == 0) 
                            //NB: Evaluate our much more aggressive advertising on android first
    {
        //Schedule Interstitial 
        TweenAddCallback(go_TweenSlideText,TWEEN_EV_FINISH,id,
                ScheduleScript,obj_control_main,true,.20,
                    ads_show_interstitial,false); 
      
                    
    }
    
}

         
            
TweenDestroyWhenDone(go_TweenFade,true);
TweenDestroyWhenDone(go_TweenSlide2,true);
TweenDestroyWhenDone(go_TweenSlide3,true);
TweenDestroyWhenDone(go_TweenSlideText,true);



//Fade Music
with (obj_control_main){
    scr_FadeMusic(3*room_speed);
}

//Clear Remaining Text Popups
TweenAddCallback(go_TweenFade,TWEEN_EV_FINISH,id,Destroy,obj_text_generic);







   


</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Select Gameover Choices

/*   
scr_assert_menuSurface_exists();
//surface_reset_target();
surface_set_target(global.menuSurface);
//draw_clear_alpha(COLORS[7],1);
// If Popup prompt is in play
if popup_page[0] != 0 {
    draw_clear_alpha(COLORS[7],0);  // 0 alpha makes text more legible
}
else {
    draw_clear_alpha(COLORS[7],1);  // 1 alpha is needed to make popups look good
}

    
scr_menu_draw_gameover()
    
    
//Reset Surface
surface_reset_target()   





</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="25">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Outro Tweens


var TxtLen = (ds_list_size(go_dialogue_txt)+2)/2;
var TxtDur = max(1/room_speed, .25 * min(1,TxtLen))//max(1,room_speed * .5 * TxtLen);
    //We keep duration fast on exit to keep replay quick.
go_TweenSlideText = TweenFire(id, go_SlideTweenText,EaseLinear, 
                    TWEEN_MODE_ONCE,true,0,TxtDur, go_SlideTweenText[0], 0); 
                        // Tweens need a duraton of at least 1 to prevent divide by zero problems
go_TweenSlide3 = TweenCreate(id, go_SlideTween3,EaseLinear,
                    TWEEN_MODE_ONCE,true,0,.25,1,0);
go_TweenSlide2 = TweenCreate(id, go_SlideTween2,EaseInBack,
                    TWEEN_MODE_ONCE,true,0,.25,1,0);
go_TweenFade = TweenCreate(id, go_FadeTween,EaseLinear,
                    TWEEN_MODE_ONCE,true,0,.25,1,0);
                    
TweenAddCallback(go_TweenSlideText,TWEEN_EV_FINISH,id,TweenPlay,go_TweenSlide3)
TweenAddCallback(go_TweenSlide3,TWEEN_EV_FINISH,id,TweenPlay,go_TweenSlide2)
TweenAddCallback(go_TweenSlide2,TWEEN_EV_FINISH,id,TweenPlay,go_TweenFade)

TweenDestroyWhenDone(go_TweenSlideText,true);
TweenDestroyWhenDone(go_TweenSlide3,true);
TweenDestroyWhenDone(go_TweenSlide2,true);
TweenDestroyWhenDone(go_TweenFade,true);



//Clear text popups
with(obj_text_generic){instance_destroy()};
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="10">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Gameover Menu Selections

switch go_selected[0]
{
    // Toggle Stat Display
    case 1:
         go_display_index = (go_display_index+index_adjust) mod array_length_1d(go_display_score);
         go_selected[0] = noone;
    break;
    
    //Restart Game
    case 2: 
         event_perform(ev_other, ev_user15);
         TweenAddCallback(go_TweenFade,TWEEN_EV_FINISH,obj_control_main,
                                            ScheduleScript,obj_control_main, false, 2,
                                                scr_restart_game_init); 
         //Remove Banner Ads
         if ADS_BANNERS != "" {ads_remove_banner();}
         
         // Disable Recording on Return to Game
         scr_everyplay_stop_recording();
         
    break;
    //Go Back to Menu
    case 3:  
         event_perform(ev_other, ev_user15);
         TweenAddCallback(go_TweenFade,TWEEN_EV_FINISH,obj_control_main,
                                            ScheduleScript,obj_control_main, false, 2, 
                                                        scr_room_goto,rm_menu); 
         scr_StopMusic(1*room_speed);
         //Remove Banner Ads
         if ADS_BANNERS != "" {ads_remove_banner();}
         
         // Disable Recording on Return to Menu
         scr_everyplay_stop_recording();
         
    break;
         
         
         
    //HTML OPTIONS
    //Facebook html
    case 4: 
         scr_button_share(1);
         go_selected[0] = noone;
    break;
    //Twitter html
    case 5:
         scr_button_share(2);
         go_selected[0] = noone;
    break;
         
         
    //MOBILE OPTIONS
    //Rate Mobile selected
    case 6: 
         scr_button_rate()
         go_selected[0] = noone;
    break;
         
   
    //No Ads Mobile Selected
    case 7: 
         scr_button_deluxe();
         go_selected[0] = noone;
    break;

         
               
    //Share mobile selected
    case 8: 
         scr_button_share(0);
         go_selected[0] = noone;
    break;
            
    //Open Landing PAge
    case 9: 
         scr_button_get();
         go_selected[0] = noone;
    break;
         
    //Theme Switcher Paintbrush
    case 10: 
         scr_button_themeswitcher();
         go_selected[0] = noone;
    break;
         
    //Grid Switcher 
    case 11: 
         scr_button_gridswitcher();

         
         go_selected[0] = noone;
    break;
         
    //Rigor Switcher 
    case 12: 
         scr_button_rigorswitcher();

         
         go_selected[0] = noone;
    break;
         
    //Quest Reward
    case 13: 
         
         scr_button_questReward();
         
         go_selected[0] = noone;
    break;
         
    //Gift
    case 14: 
         scr_button_giftReward();
         
         go_selected[0] = noone;
    break;
         
    //Prize Wheel
    case 15: 
         scr_button_prizeWheel();
         
         go_selected[0] = noone;
    break;
         
    //Video Reward
    case 16: 
         scr_button_videoReward();
         
         go_selected[0] = noone;
    break;
         
    //Quest Cancel
    case 17: 
         scr_button_questCancel();
         go_selected[0] = noone;
    break;
         
    // Mode Switcher
    case 18: 
         scr_button_modeswitcher();
         go_selected[0] = noone;
    break;
         
    //Interstitial Reward
    case 19: 
         scr_button_interstitialReward();
         
         go_selected[0] = noone;
    break;
    
    
    //PLM Promote Reward
    case 20: 
         scr_button_promotePLM();
         
         go_selected[0] = noone;
    break;
    
    //Everyplay Prompt
    case 21: 
         scr_button_everyplay();
         
         go_selected[0] = noone;
    break;
    
         
    default:
         go_selected[0] = noone;
    break;
    
         
         
         
}

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="5">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///destroy

instance_destroy();
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///GameOver Draw

scr_menu_draw_gameover()
    
//scr_page_draw_surface(global.menuSurface)


</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
