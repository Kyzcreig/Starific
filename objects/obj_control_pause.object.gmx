<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>-2000</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Ini tween vars
LAST_ROOM = rm_game
returnMenu = false;


/* NB: It's important our depth is lower than paddle, etc. 
        So it doesn't show during theme changes
        I set pause depth to -2000.

*/

//Tween Vars
p_FadeTween[0] = 0
p_FadeBackTween[0] = 1
p_SlideTween1[0] = 0
p_SlideTween2[0] = 0
p_SlideTween3[0] = 0
p_TweenFade = 0
p_TweenFadeBack = 0
p_TweenSlide1 = 0
p_TweenSlide2 = 0
p_TweenSlide3 = 0

p_selected[0] = noone;
p_selected[1] = true;

popup_page[0] = 0 ;

var easeDur = .2;
/*
//If OS Paused, Speed up the tween
if os_is_paused(){ 
    dur /= 1//2;
}*/

//Tweens
p_TweenFade = TweenFire(id, p_FadeTween,EaseLinear, TWEEN_MODE_ONCE,1,0,easeDur, 0,.75);
p_TweenSlide1 = TweenCreate(id, p_SlideTween1,EaseOutBack,  TWEEN_MODE_ONCE,1,0,easeDur,0,1);
p_TweenSlide2 = TweenCreate(id, p_SlideTween2,EaseOutBack,  TWEEN_MODE_ONCE,1,0,easeDur,0,1);
p_TweenSlide3 = TweenCreate(id, p_SlideTween3,EaseLinear,  TWEEN_MODE_ONCE,1,0,easeDur,0,1);

TweenAddCallback(p_TweenFade,TWEEN_EV_FINISH,id,TweenPlay,p_TweenSlide1)
TweenAddCallback(p_TweenSlide1,TWEEN_EV_FINISH,id,TweenPlay,p_TweenSlide2)
TweenAddCallback(p_TweenSlide2,TWEEN_EV_FINISH,id,TweenPlay,p_TweenSlide3)

TweenDestroyWhenDone(p_TweenFade,true);
TweenDestroyWhenDone(p_TweenSlide1,true);
TweenDestroyWhenDone(p_TweenSlide2,true);
TweenDestroyWhenDone(p_TweenSlide3,true);


/// Set Title
title_font = fnt_menu_title_95; 
title_txt = "pause";


var i = -1;
menu[++i] = scr_create_array("resume",1)
menu[++i] = scr_create_array("options",2)
//menu[++i] = scr_create_array("restart",8)
menu[++i] = scr_create_array("menu",3)



// Container Dimensions
rect_x = GAME_X
rect_y = GAME_MID_Y -1400*(1-p_SlideTween1[0])
rect_h = round(.5 * GAME_H); // can be overwritten as needed
rect_w = GAME_W;

//Button Sprites, Sound and Premium
music_spr[0] = s_v_music_off;
music_spr[1] = s_v_music_on;
sfx_spr[0] = s_v_volume_off;
sfx_spr[1] = s_v_volume_on;

var i = -1;
//Music First Button
sp_buttons[++i] = scr_create_array(music_spr, 4, music_sound, 0) //button sprite, userevent, extra data

if touchPad and PREMIUM == 0
{ //DISABLED

    if ADS_FORCED == 1 { 
        var tmp  = s_v_noads
    } else  { 
        var tmp  = s_v_deluxe 
    }   
    
    sp_buttons[++i] = scr_create_array(tmp, 6, 0, 0) //button sprite, userevent, extra data
}
// If Non-Mobile Version
if touchPad == 0{
    // show "get app" button
    sp_buttons[++i] = scr_create_array(s_v_app, 7, 0, 0) //button sprite, userevent, extra data
}

// Add Quest Cancel Button
if QUEST_DATA[0] != -1{
    sp_buttons[++i] = scr_create_array(s_v_cancel, 9, 0, 0) //button sprite, userevent, extra data
}
//Everyplay Button 
if EVERYPLAY_ENABLED {
    var is_flashing = everyplay_is_recording();
    sp_buttons[++i] = scr_create_array(spr_ep_prompt, 10, 0, is_flashing); //button sprite, userevent, extra data
}

//SFX Last Button
sp_buttons[++i] = scr_create_array(sfx_spr, 5, sfx_sound, 0) //button sprite, userevent

   

/// Set info Text
scr_set_game_info_text(); 

// Set Game Now Playing Text
scr_set_pause_now_playing(); 

// Set Resume Timer Stuff
resumeCD[0] = 0; 
resumeCD_scale[0] = 1;
resumeCD_tween = noone;
resumeFixedTP = false;






</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///create background image and such


//Maybe this is crashing iOS
//if (os_browser == browser_not_a_browser){
//    application_surface_enable(true);
//}

///PAUSE particles/audio/shake
RETURN_TO_PAUSE = false

//Init
deactivated_object_list = noone;
scr_pause_effects()

spr_temp = -1
skin_index = CURSKIN;
scr_menu_pause_make_background();




</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="1" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///resume game
//Reactive and clean up PAUSE

//if (os_browser == browser_not_a_browser){
//    application_surface_enable(false);
//}

//PAUSE = false

//room_persistent = false

scr_resume_effects();

LAST_ROOM = rm_menu

GAME_PAUSE = false;

//Reactivate objects
if ds_exists(deactivated_object_list, ds_type_list){
    if !returnMenu {
        instance_activate_list(deactivated_object_list);
    } else {
        // Forget objects we no longer need
        ds_list_destroy(deactivated_object_list);
    }
}

draw_enable_drawevent(1);
sprite_delete(spr_temp);

// If Returning to Main Menu
if returnMenu{

    // Clear Effects 
    part_particles_clear(PSYS_SUBSTAR_LAYER)
    part_particles_clear(PSYS_FIELD_LAYER)
    part_particles_clear(PSYS_STAR_LAYER)
    
    // End All SFX And Music
    if audio_exists(CURRENT_SONG) {
        scr_MusicStop()
    }
    /*
    for (i=0;i&lt;ds_list_size(music_list);i++){
        audio_resume_sound(music_list[| i])
        audio_sound_gain(music_list[| i],0,0);
    }*/
    for (i=0;i&lt;ds_list_size(sfx_list);i++){
        audio_stop_sound(sfx_list[| i])
    }
    // Return to Menu
    room_goto(rm_menu)
} 
// Else if Resuming Game
else {
    if resumeFixedTP {
        ScheduleScript(obj_control_main,0, 3, scr_tp_set_fixed_ease);
    }

}



</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Reactivate everything and clean up

//if (os_browser == browser_not_a_browser){
//    application_surface_enable(false);
//}

//PAUSE = false

//room_persistent = false
scr_resume_effects();

LAST_ROOM = rm_menu

if ds_exists(deactivated_object_list, ds_type_list){
    instance_activate_list(deactivated_object_list)
}

instance_destroy()
//ScheduleScript(id,false,5,Destroy,id)
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Return From Options Code 


//Repause Music when returning from options
if RETURN_TO_PAUSE == true
{
   // Pause Special Effects and Music 
   audio_pause_all();
   MUSIC_ACTIVE = false;
   RETURN_TO_PAUSE = false
   if shaking
   {
       view_xview[0] = shaken_xview
       view_yview[0] = shaken_yview
   }
    // Set Up Tween Fade In
    p_TweenFade = TweenFire(id, p_FadeTween,EaseLinear,TWEEN_MODE_ONCE,1,0,.2, 1,.75);
                  //NB: This masks the background during a theme color change sprite generation
    p_TweenSlide1 = TweenCreate(id, p_SlideTween1,EaseOutBack,TWEEN_MODE_ONCE,1,0,.2, 0,1);
    p_TweenSlide2 = TweenCreate(id, p_SlideTween2,EaseOutBack,TWEEN_MODE_ONCE,1,0,.2, 0,1);
    p_TweenSlide3 = TweenCreate(id, p_SlideTween3,EaseLinear,TWEEN_MODE_ONCE,1,0,.2, 0,1);
    p_TweenFadeBack = TweenCreate(id, p_FadeBackTween,EaseLinear,TWEEN_MODE_ONCE,1,0,.2, 0,1);
    
    TweenAddCallback(p_TweenFade,TWEEN_EV_FINISH,id,TweenPlay,p_TweenSlide1)
    TweenAddCallback(p_TweenSlide1,TWEEN_EV_FINISH,id,TweenPlay,p_TweenSlide2)
    TweenAddCallback(p_TweenSlide2,TWEEN_EV_FINISH,id,TweenPlay,p_TweenSlide3)
    TweenAddCallback(p_TweenSlide3,TWEEN_EV_FINISH,id,TweenPlay,p_TweenFadeBack)

    TweenDestroyWhenDone(p_TweenFade,true);
    TweenDestroyWhenDone(p_TweenSlide1,true);
    TweenDestroyWhenDone(p_TweenSlide2,true);
    TweenDestroyWhenDone(p_TweenSlide3,true);
    TweenDestroyWhenDone(p_TweenFadeBack,true);
    
    //Reshow banner ads
    if lastPlaytime &gt; 0{
        if ADS_BANNERS != "" {ads_show_banner();}
    }
    
    
    //Check if color was changed
    if skin_index != CURSKIN {
        skin_index = CURSKIN;
        mColorsChanger = 1;
    }
        
}

if mColorsChanger &gt; 0{// and mouse_check_button_released(mb_right){
    mColorsChanger -= .2 //important we put this first because
    //the event perform decrementing it already
    event_perform(ev_other,ev_user1)
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Select Menu Choices

/*
scr_assert_menuSurface_exists();
surface_set_target(global.menuSurface);
//draw_clear_alpha(COLORS[7],1); //This must be cleared at 1 alpha to work with color transitions from Options page
// If Popup prompt is in play
if popup_page[0] != 0 {
    draw_clear_alpha(COLORS[7],0);  // 0 alpha makes text more legible
}
else {
    draw_clear_alpha(COLORS[7],1);  // 1 alpha is needed to make popups look good
}

scr_menu_draw_pause()


//Reset surface draw
surface_reset_target()

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="25">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Outro Tweens

//Fade to Dark, then fade back out to Options page
p_TweenFadeBack = TweenFire(id, p_FadeBackTween,EaseLinear,TWEEN_MODE_ONCE,1,0,.2,1,0);
            //NB: Fadeout the Screenshot
p_TweenSlide3 = TweenCreate(id, p_SlideTween3,EaseLinear,TWEEN_MODE_ONCE,1,0,.2,1,0);
p_TweenSlide2 = TweenCreate(id, p_SlideTween2,EaseOutBack,TWEEN_MODE_ONCE,1,0,.2,1,0);
p_TweenSlide1 = TweenCreate(id, p_SlideTween1,EaseOutBack,TWEEN_MODE_ONCE,1,0,.2,1,0);  
p_TweenFade = TweenCreate(id, p_FadeTween,EaseLinear,TWEEN_MODE_ONCE,1,0,.2,.75,0);

TweenAddCallback(p_TweenFadeBack,TWEEN_EV_FINISH,id,TweenPlay,p_TweenSlide3)
TweenAddCallback(p_TweenSlide3,TWEEN_EV_FINISH,id,TweenPlay,p_TweenSlide2)
TweenAddCallback(p_TweenSlide2,TWEEN_EV_FINISH,id,TweenPlay,p_TweenSlide1)
TweenAddCallback(p_TweenSlide1,TWEEN_EV_FINISH,id,TweenPlay,p_TweenFade)

TweenDestroyWhenDone(p_TweenSlide3,true);
TweenDestroyWhenDone(p_TweenSlide2,true);
TweenDestroyWhenDone(p_TweenSlide1,true);
TweenDestroyWhenDone(p_TweenFade,true);
TweenDestroyWhenDone(p_TweenFadeBack,true);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="11">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Reactivate everything
if mColorsChanger == .8{
    if ds_exists(deactivated_object_list, ds_type_list){
        instance_activate_list(deactivated_object_list)
    }
}    



</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///call background image create

//We do these at different steps because deactivation takes 1 STEP to wear off
if mColorsChanger &lt;= .6{
    scr_menu_pause_make_background()
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="10">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Pause Menu Selections



switch p_selected[0]
{
    //Resume Game
    case 1:    
        //Tweens
        p_TweenSlide3 = TweenFire(id, p_SlideTween3,EaseLinear,TWEEN_MODE_ONCE,1,0,.2,1,0);
        p_TweenSlide2 = TweenCreate(id, p_SlideTween2,EaseOutBack,TWEEN_MODE_ONCE,1,0,.2,1,0);
        p_TweenSlide1 = TweenCreate(id, p_SlideTween1,EaseOutBack,TWEEN_MODE_ONCE,1,0,.2,1,0);  
        p_TweenFade = TweenCreate(id, p_FadeTween,EaseLinear,TWEEN_MODE_ONCE,1,0,.2,.75,0);
        
        TweenAddCallback(p_TweenSlide3,TWEEN_EV_FINISH,id,TweenPlay,p_TweenSlide2)
        TweenAddCallback(p_TweenSlide2,TWEEN_EV_FINISH,id,TweenPlay,p_TweenSlide1)
        //TweenAddCallback(p_TweenSlide1,TWEEN_EV_FINISH,id,TweenPlayOnce,p_TweenFade)
        TweenDestroyWhenDone(p_TweenSlide3,true);
        TweenDestroyWhenDone(p_TweenSlide2,true);
        TweenDestroyWhenDone(p_TweenSlide1,true);
        TweenDestroyWhenDone(p_TweenFade,true);
        //TweenDestroyWhenDone(p_TweenFadeBack,true);
    
        //Clear Inputs
        keyboard_clear(ord('P'));
        keyboard_clear(vk_backspace);
        mouse_clear(mb_left);
        
        // Set Resume Flag, to preempt touchpad spazzing
        PAUSE_RESUME = true;
        
        // Set Resume Countdown Timer
        if MOVE_ACTIVE {
            TweenAddCallback(p_TweenSlide1,TWEEN_EV_FINISH,id,scr_pause_resume_countdown, 3)
        } 
        // Else Ease Out Normally
        else {
            TweenAddCallback(p_TweenSlide1,TWEEN_EV_FINISH,id,TweenPlay,p_TweenFade);
        }
        
        //Queue UnPause Game // Destroy
        TweenAddCallback(p_TweenFade,TWEEN_EV_FINISH,id,Destroy,id);
    break;
        
    //Go to Options Page
    case 2:  
        //Tweens
        event_perform(ev_other,ev_user15);
        
        
        // Set Up Room Persistence
        LAST_ROOM = room  
        room_persistent = true
        
        
        view_xview[0] = VIEW_X
        view_yview[0] = VIEW_Y
        
        // ResumeMusic
        TweenAddCallback(p_TweenFade,TWEEN_EV_FINISH,obj_control_main,scr_MusicResume);
        
        // Switch Rooms
        TweenAddCallback(p_TweenFade,TWEEN_EV_FINISH,obj_control_main,scr_room_goto,rm_options);
                                    //NB: Persistent Room makes this call ok.
        
        // Queue Fadeback
        TweenAddCallback(p_TweenFade,TWEEN_EV_FINISH,obj_control_main,array_set_index_1d,p_TweenFadeBack,0,0)
                                /*NB: Needed to make sure background still is invisible 
                                      on return from pause
                                */
        //Remove Banner Ads
        if ADS_BANNERS != "" {ads_remove_banner();}
        
        
        
        p_selected[0] = noone;  //shouldn't be an issue while all those tweens exist
    break;
         
    //Go Back to Menu
    case 3:  
        //Tweens
        event_perform(ev_other,ev_user15);
        
        // Cleanup room
        scr_reset_game_room_state()

        returnMenu = true;
        TweenAddCallback(p_TweenFade,TWEEN_EV_FINISH,id,Destroy,id);
        //TweenAddCallback(p_TweenFade,TWEEN_EV_FINISH,id,Alarm,id,0,1);
         
        //Remove Banner Ads
        if ADS_BANNERS != "" {ads_remove_banner();}
        
        // Disable Everyplay
        scr_everyplay_stop_recording();
        
        
        p_selected[0] = noone;  //shouldn't be an issue while all those tweens exist
    break;
         
                
    //Toggle Music Mute
    case 4:
         //Toggle Sound
         scr_sound_toggle_music()
         
        p_selected[0] = noone;
        break;
        
    //Toggle SFX Mute
    case 5:
         //Toggle Sound
         scr_sound_toggle_sfx();
    
         p_selected[0] = noone;
         break;
         
         
    //Open No Ads appstore page
    case 6:
         scr_button_deluxe();
    
         p_selected[0] = noone;
    break;
         
    //Open Landing PAge
    case 7: 
         
         scr_button_get();
    
         p_selected[0] = noone;
    break;
      
    //Restart Game
    case 8: 
         
        //Tweens
        event_perform(ev_other,ev_user15);
        
        // Destroy Pause
        TweenAddCallback(p_TweenFade,TWEEN_EV_FINISH,id,Destroy,id);
        // Set Room Restart
        scr_reset_game_room_state();
        scr_restart_game_init();
        //TweenAddCallback(p_TweenFade,TWEEN_EV_FINISH,id,scr_restart_game_init)
        
        //Remove Banner Ads
        if ADS_BANNERS != "" {ads_remove_banner();}
    
        p_selected[0] = noone;
    break;
      
    //Cancel Quest
    case 9:
    
        // Set Analytics
        analytics_button_counter("questCancelPrompt");
        
        // Spawn Prompt
        instance_create(x,y,obj_prompt_quest_cancel);
        
        
        // Reset Game Info Text in case quest is cancelled.
        ScheduleScript(id, false, 5, scr_set_game_info_text);
        ScheduleScript(id, false, 5, scr_set_quest_cancel_button_status);
    
        p_selected[0] = noone;
    
    break; 
    // Everyplay
    case 10:
        // Set Analytics
        analytics_button_counter("everyplayPrompt");
        // Spawn Prompt
        ep_prompt = instance_create(x,y,obj_prompt_everyplay);
        with (ep_prompt) {
            enable_share_reward = false;
        }
        
        //  Set button Flaahing on recording
        ScheduleScript(id, false, 5, scr_set_everyplay_button_status);
    
        p_selected[0] = noone;
    
    break; 





}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///DRAW PAUSE MENU/SEQUENCE

scr_menu_draw_pause()

/*
scr_page_draw_surface(global.menuSurface)

</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
