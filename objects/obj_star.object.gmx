<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>s_v_star_white</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>-1000</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///init vars

// Initialize Move (fail safe, good for debugging)
scr_move_set_active();


//spe = 0; 
image_alpha = 1;
depth = -1000

//show_message(string(real(string(ds_list_find_index(global.respawns,1)))))
image_speed = 0;
//mask_index = sp_shooter_normal;

//Star global counter
lastStars++;

// Init StarOutline var
starOutline = noone;



gridXY = convertXYtoGrid(x,y);
intGridXY[0] = round(gridXY[0]);
intGridXY[1] = round(gridXY[1]);
birthStep = STEP

trailSpawner = 0;

// Intersection data array
intersect[0] = false;

// Set Shooter Speed
speed = starSpeedReal;
rangeBuffer = speed/cellSize;

// Collision Stuff
inFieldState = 0;//2;
inFieldActive = 3;
lastTouched = noone;



// Set Dir
sdir = direction;
//rdir = choose(90,-90)



//alarm[1] = 2
//multiplier = 1;
addmulti = 0;
streak = 0;
streakTier = 0
text = ''

diagonalConstant = sqrt(2)-1;

//SPEED STUFF
flash = false;
flashing = false;



// Star Modifier Data
scr_reflector_init_star_modifiers();
// Scale Up Data
baseScale[0] = 1;
auxScale[0] = 0;
baseScaleTween[0] = noone;//= super star tweener
auxScaleTween[0] = noone;  //= collision tweener
baseScaleMax = 2.5;
auxScaleMax = 1.25;
scaleTweenDur = .10 //seconds;



c_norm = COLORS[0]//506 6061//c_white
image_blend = COLORS[0];
c_slow = COLORS[9]//less luminous color
c_fast = COLORS[10]//more luminous color
c_ballmod = COLORS[11]; //more or less saturated color
c_trail = c_norm//c_a qua
c_current = c_trail


alarm[0] = 0; //flashing
alarm[1] = 2; //resetting reflect off paddle
//corner = obj_control_game.corner
//direction at launch based on aimer objects; this might work better
//if it was based on image index of launcher

//bomb var for keeping track till screenshake
//oScale = 8/5*cellH/sprite_get_width(sprite_index) //Super arbitrary scaling factor
oSize = 1.6*cellSize;
oScale = oSize/sprite_get_height(sprite_index) //Super arbitrary scaling factor
image_xscale = oScale//objectScale*1.8
image_yscale = oScale//objectScale*1.8



particleDeath = true;


//_collidedwith = noone
_hasTurned = false
_bombedList = noone
_bombedExtra = 0;
_bombedCount = 0;


//probably want to do a tween play and tween reverse 
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Trail Particle Stuff

// Set Default Trail Delay
trailDelay = scr_trail_delay_set(starModifiers[3]);

// Create Particle
particleStarTrail = part_type_create();
pStarAlphaStart = 1;
pStarAlphaEnd = .2;

// Set Particle
scr_part_star_set(particleStarTrail)
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="1" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///particle death and garbage collect particle

if part_type_exists(particleStarTrail)
{
   var gc_array = noone;
   gc_array = Array(particleStarTrail, 1*room_speed);
   ds_list_add(global.GC_particles,gc_array);
}

//Particle effect happens on destruction

//So I think this is cool for now but if the effect is a lot more flash or it becomes confusing
//I don't want it stealing attention.
//Might even be worth coopting one of these effects for the paddle when it goes out of bounds.
   //part_type_gravity(p_catch,0.2*RMSPD_DELTA,direction);
if particleDeath {
    part_particles_create_colour(PSYS_SUBSTAR_LAYER, x, y, p_catch,image_blend,200);
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///flashing
var speedModifiers = ((POWER_faster[@ 0] + (POWER_addslower[@ 7]*POWER_subfaster[@ 7]/1)*2) - 
                      (POWER_slower[@ 0] + (1/POWER_addslower[@ 7]*POWER_subfaster[@ 7])*2));
if 0 &lt; speedModifiers{
    if !flashing{
        flashing = true;
        c_current = c_fast;
        c_trail = c_current;
        
    }
    else if flashing{
        flashing = false;
        c_current = c_norm;
        c_trail = c_current;
    }
}
else if 0 &gt; speedModifiers{
    if !flashing{
        flashing = true;
        c_current = c_slow;
        c_trail = c_current;
    }
    else if flashing{
        flashing = false;
        c_current = c_norm;
        c_trail = c_current;
    }
}
else{
        flashing = false;
        c_current = c_norm;
        c_trail = c_current;
     
}

// If Turn modifier active
if starModifiers[1]{c_trail = merge_color(c_current,c_ballmod,1)}
image_blend = c_trail;


flash = false;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Set Speed, Detect Collision



/*
//Set image angle of sprite/particles
if image_angle != direction{
    part_type_direction(p_star,image_angle,image_angle,0,0);
    image_angle = direction //DELETE ME FOR STAR STUFF? //MAYBE IT WOULD LOOK BETTER
}*/

//rdir = choose(90,-90)

// Set Shooter Speed
speed = starSpeedReal;
// Update Grid Coordinates And Direction
gridXY = convertXYtoGrid(x,y);
intGridXY[0] = round(gridXY[0]);
intGridXY[1] = round(gridXY[1]);
sdir = direction;
currentStep = STEP-birthStep;
altStep = currentStep &amp; 1;//mod 2 == 0


// Set an "in collission range" buffer distance, make it bigger when moving diagonally
rangeBuffer = speed/cellSize; //* ( 1 + diagonalConstant * (direction mod 90 != 0));

switch inFieldState {
    // After Paddle Collision
    case 0: 
        // Advance State
        inFieldState++;
        break;
    // After 1 Step of Not Touching Paddle
    case 1:
        //Check if star within octagon bounds
        if scr_star_inPlay_location_is_valid(gridXY[0],gridXY[1], rangeBuffer*3) {
            //NB: We calcualte if its within 3 steps of the field
            inFieldState++;
        }
        break;
        
    case 2: 
        // Advance State
        inFieldState++;
        break;
        
    // In Play
    case 3: 
        // Check if Within RangeBuffer of Nearest Cell
        if point_distance(gridXY[0],gridXY[1], 
            intGridXY[0],intGridXY[1]) &lt; rangeBuffer 
        {
            // Round Grid Coordinates
            gridXY = intGridXY;
            // If Normal Sized Star
            if !starModifiers[2] { //if 
               // Check if Object at This Grid Location
               scr_grid_collision(gridXY[0], gridXY[1]);
            }
            // Else If Super Star
            else {
               // Iterate over 3x3 Grid Area 
               for (i=-1;i&lt;=1;i++){
                   for (j=-1;j&lt;=1;j++){
                       scr_grid_collision(gridXY[0]+i,gridXY[1]+j)
                   }
               }
            }
            //Realign Star to Grid and Toggle the have-we-turned boolean
            if _hasTurned{
                 // Update Real Coordinates to Exact Grid Location
                 var newFieldXY = convertGridtoXY(gridXY[0],gridXY[1]);
                 x = newFieldXY[0];
                 y = newFieldXY[1];
                _hasTurned = false;
            }    
        }
        // Detect if inField for collision shortcircuiting
            //NB: Collision detection is a heavy operation
        /*
        if altStep {
            scr_inField_set(gridXY[0],gridXY[1]);
        }*/
        break;
}

</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Effects, Scaling, Flashing


/*  
    NB: End step is used so that the particles spawn at the right X/Y location.
*/
 

//Activate POWER_hugestar[@ 0] or Star Pulsar
if POWER_hugestar[@ 0] &gt; 0 or starModifiers[6] &gt; 0 {
    starModifiers[2] = true
}else{
    starModifiers[2] = false
}

//Activate POWER_halfangle[@ 0]
if POWER_halfangle[@ 0] &gt; 0 {
    // Set Angle Scalar
    starModifiers[0] = .5;
}
//Activate POWER_threehalfangle[@ 0]
else if POWER_threehalfangle[@ 0] &gt; 0 {
    // Set Angle Scalar
    starModifiers[0] = 1.5;
}
//Activate POWER_reverseangle[@ 0]
else if POWER_reverseangle[@ 0] &gt; 0 {
    // Set Angle Scalar
    starModifiers[0] = 2;
}
//Activate POWER_noangle[@ 0]
else if POWER_noangle[@ 0] &gt; 0 {
    // Set Angle Scalar
    starModifiers[0] = 0;
}
//Activate POWER_randomangle[@ 0] or Fickle Stars
else if POWER_randomangle[@ 0] &gt; 0 or starModifiers[7] &gt; 0 {
    starModifiers[4] = true; //flag random direction
    starModifiers[5] = false; //unflag diagonal turning
}
//Activate POWER_diagturn[@ 0]
else if POWER_diagturn[@ 0] &gt; 0 {
    starModifiers[4] = false; //unflag random diraction
    starModifiers[5] = true; //flag diagonal turning
}
// Else Clear All
else {
    // Set Angle Scalar
    starModifiers[0] = 1; 
    
    starModifiers[4] = false;  //unflag random diraction
    starModifiers[5] = false;  //unflag diagonal turning
}

// Decrement Star Pulsar Timer
if starModifiers[6] &gt; 0 {
   starModifiers[6] -= RMSPD_DELTA; 
}
// Decrement Star Fickle Timer
if starModifiers[7] &gt; 0 {
   starModifiers[7] -= RMSPD_DELTA; 
}

//TURN MOD COLORS MERGE
if (starModifiers[0] != 1 or 
    starModifiers[4] or 
    starModifiers[5]) //and 
    //!starModifiers[1] //and image_blend != c_pierce{
{
    starModifiers[1] = true
    c_trail = c_current
    c_trail = merge_color(c_trail,c_ballmod,1)
    image_blend = c_trail//c_norm//c_trail
}
else if starModifiers[0] == 1 and 
    !starModifiers[4] and 
    !starModifiers[5] //and 
    //starModifiers[1]
{
    starModifiers[1] = false;
    c_trail = c_current;//c_current
    image_blend = c_trail;
}   


//FLASH SLOW/FAST COLORS
var speedModifiers = ((POWER_faster[@ 0] + (POWER_addslower[@ 7]*POWER_subfaster[@ 7]/1)*2) - 
                      (POWER_slower[@ 0] + (1/POWER_addslower[@ 7]*POWER_subfaster[@ 7])*2));
if !flash and (0 != speedModifiers){
    flash = true;
}
if flash and alarm[0] &lt; 1{
    alarm[0] = max(1,((10 - abs(speedModifiers)) * room_speed) / 40)
}
else if !flash and flashing{
     flashing = false;
     c_current = c_norm
     c_trail = c_current
     if starModifiers[1]{
        c_trail = merge_color(c_trail,c_ballmod,1)
     }
     image_blend = c_trail
}

//}


//Flash Color IF TIME UP   
if MODE == MODES.TIME{
   if time_over{ 
      c_trail = c_fast//merge_color(c_norm, COLORS[4], lerp(0,.75,FULL_SECOND_LERP))//COLORS[2]
      image_blend = c_trail
   }
}


//BIG STAR GROW TWEEN
if starModifiers[2] and !starModifiers[3]
{
    starModifiers[3] = true
    //Tween Star scale up on collision
    scr_star_scale(EaseInOutSine,scaleTweenDur*5, baseScale, baseScaleMax, baseScaleTween);
    // Set Tail Size
    trailDelay = scr_trail_delay_set(starModifiers[3] );
}
else if !starModifiers[2] and starModifiers[3]
{
    starModifiers[3] = false
    //trailDelay = round((2+0*2) / RMSPD_DELTA);
    //Tween Star scale up on collision
    scr_star_scale(EaseInOutSine,scaleTweenDur*5, baseScale, 1, baseScaleTween);
    /// Adjust Trail Delay
    trailDelay = scr_trail_delay_set(starModifiers[3] );
}  

//Untween collision scaleup
if !TweenExists(auxScaleTween[0]) and auxScale[0] != 1{
    scr_star_scale(EaseLinear,scaleTweenDur, auxScale, 1, auxScaleTween);
    // Adjust Trail Delay
    trailDelay = scr_trail_delay_set(starModifiers[3]);
}

// If Screen is Shaking (lots of action...)
if SHAKE_TIME &gt; 0 //or global.BOMB_FORCE &gt; 0 
{ 
    // Over Color to Normal to add Visibile (for contrast)
    c_trail = c_norm;
    image_blend = c_trail;

    //Tween Star scale up for contrast
    if !TweenExists(auxScaleTween[0]) or TweenGetDestination(auxScaleTween[0]) == 0 {
        //Tween Star scale up on collision
        scr_star_scale(EaseLinear,scaleTweenDur, auxScale, auxScaleMax, auxScaleTween);
    }
}

//Tween Scale
newScale = (baseScale[0]*auxScale[0]) * oScale;
if image_xscale != newScale {
   //Scale sprite
   image_xscale = newScale //1
   image_yscale = newScale //1
   /*
   image_xscale += (newScale - image_xscale) * .25 * RMSPD_DELTA //1
   image_yscale += (newScale - image_yscale) * .25 * RMSPD_DELTA //1
   */
   //Scale particles
   part_type_size(particleStarTrail,1,1,-0.01*image_xscale/oScale,0);
   part_type_scale(particleStarTrail,image_xscale,image_xscale);
}


// Draw Star Particle Trail
if ((STEP) mod trailDelay) == 0{
//if (STEP mod trailDelay) == 0 {

    part_particles_create_color(PSYS_STAR_LAYER,x,y,particleStarTrail,c_trail,1);
}





</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///dynamic aimer [unused]


/*
if booster_Aimer {scr_dynamic_aimer2(id,direction,pierce);}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Keep at bottom (Out of Bounds Code)

/* NB: Annoyingly a lot of other step code doesn't work once you flag an object as destroyed.


*/

// Self Destruct if Hitting Outside
scr_out_of_bounds_destroy();
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="11">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///recoloring
c_norm = COLORS[0]//506 6061//c_white
image_blend = c_norm
c_fast = COLORS[10]//more luminous color
c_slow = COLORS[9]//less luminous color
c_ballmod = COLORS[11]//10049536//make_colour_rgb(17,84,135)//make_colour_rgb(255,50,50)
//c_combo = c_white//COLORS[2]//make_colour_rgb(0,255,255)//c_aqua

c_trail = c_norm//c_a qua
c_current = c_trail

//Set Particle trail color
part_type_color1(particleStarTrail,COLORS[0]);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="5">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///destroy

instance_destroy();
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints>
    <point>22,22</point>
    <point>22,22</point>
  </PhysicsShapePoints>
</object>
