<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>-750</depth>
  <persistent>0</persistent>
  <parentName>obj_launcher</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="1" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///just overwriting the inherited destruction

if ds_exists(ds_type_list,dtocornerL){ds_list_destroy(dtocornerL)}
if ds_exists(ds_type_list,dtocornerR){ds_list_destroy(dtocornerR)}
if ds_exists(ds_type_list,spritestartx){ds_list_destroy(spritestartx)}
if ds_exists(ds_type_list,spriteendx){ds_list_destroy(spriteendx)}

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///update mirror vars


//show_message('x,y,STEP =' +string(x)+','+string(y)+','+string(STEP))



image_xscale = paddle_id.image_xscale * pad_xscale[0]
image_yscale = paddle_id.image_yscale


image_angle = paddle_id.image_angle + inversion
mirrormouse = mouseangle - inversion
if mirrormouse &lt; 0{
   mirrormouse += 360
}

// Set Paddle Coloring
if !mirrorColorDeath { 
    padColor[0] = paddle_id.padColor[0];

}else {
    // Set Mirror to Downer Color
    padColor[0] = merge_colour(COLORS[0],COLORS[2],FULL_SECOND_LERP);
    
}


//Place paddle
scr_paddle_placement(mirrormouse);




</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///rebound shooters and catch powerups


scr_paddle_collision_step()
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///draw mirror paddle
scr_draw_paddle(padColor[0])

</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///collision line
/*
var x1, x2, y1, y2, xL, yL, xR, yR;
//this stuff is all fucky because spriteendx is the distance from 0 rather than the distance from the x,y of the object.

x1 = x - dcos((image_angle))*(PADDLE_W / 2 - spritestartx)*image_xscale //left main x
y1 = y + dsin((image_angle))*(PADDLE_W / 2 - spritestartx)*image_xscale //left main y
x2 = x + dcos((image_angle))*(PADDLE_W / 2 - (PADDLE_W - spriteendx))*image_xscale //right main x
y2 = y - dsin((image_angle))*(PADDLE_W / 2 - (PADDLE_W - spriteendx))*image_xscale //right main y

xL = x1 - dcos((image_angle -45))*spritestartx*image_xscale*1.2 //- dsin((image_angle -45))*4 
yL = y1 + dsin((image_angle -45))*spritestartx*image_xscale*1.2 //- dcos((image_angle -45))*4

xR = x2 + dcos((image_angle +45))*(PADDLE_W - spriteendx)*image_xscale*1.2 //- dsin((image_angle +45))*4
yR = y2 - dsin((image_angle +45))*(PADDLE_W - spriteendx)*image_xscale*1.2 //- dcos((image_angle +45))*4

draw_set_color(c_red)
draw_line(x1,y1,x2,y2)
draw_line(xL,yL,x1,y1)
draw_line(xR,yR,x2,y2)
draw_text(x,y-10,'y2: '+string(y2))
draw_text(x,y-26, 'rcorner paddle y'+string(y + dsin((image_angle))*(PADDLE_W / 2 - spriteendx)*image_xscale))

</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///x,y marker
/*
draw_circle_colour(x,y,5,marker_color,marker_color,false)
draw_text_colour(x+10,y-10,'image_angle='+string(image_angle),marker_color,marker_color,marker_color,marker_color,false)
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints>
    <point>80,21</point>
    <point>80,80</point>
  </PhysicsShapePoints>
</object>
