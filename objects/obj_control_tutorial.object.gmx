<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///ini vars


//Tween in for help GUI
guiEase= EaseOutBack;//choose(EaseLinear,EaseInOutBack,EaseInOutQuad)
guiEaseReverse = EaseInBack;
helpTween[0] = 0;
TweenHelp = TweenFire(id,helpTween,guiEase,
                TWEEN_MODE_ONCE, false, 1, 1*room_speed, 0,1)
//TweenDestroyWhenDone(TweenHelp,true,false);
//ScheduleScript(id,false,obj_control_game.alarm[0],TweenPlayOnce,TweenHelp);
//ScheduleScript(id,false,1,TweenPlay,TweenHelp);


TweenTitle = noone;
TweenTutorialText = noone;

button_font = fnt_scoreboard;
outroTweenHelp = noone;

tutorialTitleTween[0] = 0; 
tutorialTextTween[0] = 0; 

//Starting Frame
tutorialFrame[0] = 0;

paddleMovePercent = 0;




help_selected[0] = noone;
help_selected[1] = true;

/// Set Help Buttons
text_buttons[0] = scr_create_array("help",0); //text, function_id,
text_buttons[1] = scr_create_array("custom",3);

var i, j, k;
i = -1; j = -1; k = 2;

// Init Sprite Wigglers
scr_wiggle_init(-1, .25*room_speed);


//sprite_pointer_theta = 0;
tutorial_dummy = noone;
TutorialEnding = false;




//Frame Count for Each Mode; update as needed
tutorial_set_frameCount();


tutorialAdvance = false;


text_delay=0;

//Count previous gamesplayed in this mode
ini_open("scores.ini")
    playCount = ini_read_real_MS_total(string(MODE),"0,1,2,3",0,"gamesPlayed",0)
ini_close();

//If first game, show tutorial
if playCount &lt;= 0 { 
    help_selected[0] = 0;
    event_user(0); //start tutorial
    
} 
if TUTORIAL_ENABLED{
    //Disable Paddle Movement
    tutorialActive[0] = true;
    PADDLE_MOTION = 0; //may cause issues in 2,3 modes
}


bMResetInventory = 0;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="1" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Clear surface
//Setup surface

/*
scr_assert_menuSurface_exists();
surface_set_target(global.menuSurface);
draw_clear_alpha(COLORS[7],0);


//Reset Surface
surface_reset_target()
*/


//Destroy dummy objects
if instance_exists(obj_parent_dummy){
   with (obj_parent_dummy){
        instance_destroy();
   }
}


//Activate Banner Ads
if ADS_BANNERS != "" and MOVE_ACTIVE{
   ads_show_banner()
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Selecting Help and Tutorial


/*

//Setup surface
scr_assert_menuSurface_exists();
surface_set_target(global.menuSurface);
draw_clear_alpha(COLORS[7],0);
    //NB: We keep this out of the conditinal block so that we don't risk draw event not having a surface to draw






//Reset Surface
surface_reset_target()
    
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="10">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Help/Tutorial Selections



switch help_selected[0]
{
    //Tutorial Enabled by "Help" Selection
    case 0:
    
         //Reset tutorial advance
         tutorialAdvance = 0; 
         // Reset Tutorial Ending Flag
         TutorialEnding = false;
    
         //Create outro tween
         TweenHelp = TweenFire(id,helpTween,guiEaseReverse,
                        TWEEN_MODE_ONCE, true, 0, .5,  helpTween[0],0);
         
         //Tween out Moves mixers
         if MODE == MODES.MOVES or MODE == MODES.SANDBOX{
            with (obj_control_modifiers){
                 // Prevent Simultaneous Tweens
                 if TweenExists(MixersTween) {
                    //TweenFinish(MixersTween);
                    TweenDestroy(MixersTween)
                 }
                 
                 MixersTween = TweenFire(id,MixersEase,EaseLinear,
                                TWEEN_MODE_ONCE, true, 0, .5, MixersEase[0],0);
                 //Set new mixPos to tutorial location
                 TweenAddCallback(MixersTween,TWEEN_EV_FINISH,id, array_set_index_1d, mixPos,0,1) 
                 
            }
         }
         //Tween Out Touchpad
         else{
              scr_touch_pad_tween_out();
         }
         
         
         //Enable Tutorial
         TweenAddCallback(TweenHelp,TWEEN_EV_FINISH,id, EnableTutorial,true);
         
         //Disable Paddle Movement
         PADDLE_MOTION = 0; //may cause issues in 2,3 modes
         
         //TUTORIAL_ENABLED = true;

         //Set Flag tutorial active, in case not already set
         tutorialActive[0] = true;

         help_selected[0] = noone;
         break;
         
    
    //Tutorial Skipped   
    case 1:
    //Tutorial Completed
    case 2:
    
    
         TweenTutorialText = TweenFire(id,tutorialTextTween,EaseLinear,
                            TWEEN_MODE_ONCE, true, 0,.5, 1,0); 
         TweenTitle = TweenCreate(id,tutorialTitleTween,guiEaseReverse,
                            TWEEN_MODE_ONCE, true, 0,.5, 1,0); 
         TweenHelp = TweenCreate(id,helpTween,guiEaseReverse,
                            TWEEN_MODE_ONCE, true, 0,.5, 0,1); 
         
         TweenAddCallback(TweenTutorialText,TWEEN_EV_FINISH,id,TweenPlay,TweenTitle)
         TweenAddCallback(TweenTitle,TWEEN_EV_FINISH,id,TweenPlay,TweenHelp)
         
         //Disable tutorial on tween complete
         TweenAddCallback(TweenTitle,TWEEN_EV_FINISH,id, EnableTutorial,false);
         TweenAddCallback(TweenTitle,TWEEN_EV_FINISH,id, array_set_value,tutorialActive,false);
         
         
         //Destroy dummy objects
         with(obj_parent_dummy){
             TweenAddCallback(other.TweenTutorialText,TWEEN_EV_FINISH,other.id, Destroy,id);
         }
         
         
         //Enable Paddle Movement
         if PADDLE_MOTION == 0{
            TweenAddCallback(TweenTutorialText,TWEEN_EV_FINISH,obj_control_game, scr_set_paddleMovement, 1);
         }
         //Or if we're on a paddle scene, tween out the touchpad
         else{
             scr_touch_pad_tween_out();
         }
         //Tween In Touchpad after
         TweenAddCallback(TweenHelp,TWEEN_EV_FINISH,obj_control_game, scr_touch_pad_tween_in);

         
         //Reset tutorial frame
         TweenAddCallback(TweenHelp,TWEEN_EV_FINISH,id, array_set_index_1d, tutorialFrame,0,0);
         
         //Tween in Moves mixers
         if MODE == MODES.MOVES or MODE == MODES.SANDBOX{
         
            //Pick up any placed stars
            with(obj_star_marker){
                pickup_star_marker(false);
            }
         
            with obj_control_modifiers{
                 // Prevent Simultaneous Tweens
                 if TweenExists(MixersTween) {
                    //TweenFinish(MixersTween);
                    TweenDestroy(MixersTween)
                 }
            
                //Tween out the board modifiers
                TweenFire(id,MixersEase,EaseLinear,
                        TWEEN_MODE_ONCE,1,0,.5, MixersEase[0],0);
                //Create Tween In
                MixersTween = TweenCreate(id,MixersEase,EaseLinear,
                                TWEEN_MODE_ONCE,1,0,.5 ,0,1);
                TweenDestroyWhenDone(MixersTween,true,false)
                
                //Schedule Tween In
                ScheduleScript(id, 1, 1, TweenPlay, MixersTween)  
                                        //2 seconds because that's how long it takes for TweenTitle to finish
                //Set mixPos to normal game position
                ScheduleScript(id, 1, .5, array_set_index_1d, mixPos,0,0) 
                
                
        
            
            }
            
         }
         
         //Reset Mixer Counts to Default
         if bMResetInventory{
            for (var z = 1, n = array_height_2d(boardMixers); z &lt; n; z ++){
                boardMixers[z,0] = bMStartInventory
            }
            boardMixers[0,0] = 1;
            //Reset board
            scr_respawn_tween()
            scr_sound(sd_turn_end,1)
            bMResetInventory = false;
         }
         
         // Reposition Fixed Touch Pad
         if TP_SENSE[1] == 1 {
            dynamicCenterX = TOUCH_FIXED_X;
            dynamicCenterY = TOUCH_FIXED_Y;
            
         }
         
         //Destroy
         TweenDestroyWhenDone(TweenTitle,true,false);
         TweenDestroyWhenDone(TweenHelp,true,false);
         TweenDestroyWhenDone(TweenHelp,true,false);
         
         
         help_selected[0] = noone;
    break;
         
         
    //Customize Game Settings
    case 3:
    
        //Spawn Quick Settings Room Changer
        var obj = instance_create(x,y, obj_settings_quick_select)
        with (obj) {
            // Set State to Game Settings constant
            quick_settings_state[0] = 1
        
        }
    
    
        help_selected[0] = noone;
    break;
         
         
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="5">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///destroy

instance_destroy();
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Help and tutorial


scr_menu_draw_tutorial()
/*

scr_page_draw_surface(global.menuSurface)


</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
