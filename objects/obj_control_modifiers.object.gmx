<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///ini vars
globalvar
boardMixers,
bMStarIndex,
bMSelected,
bMScheduler,
bMStartInventory,
bMtext,
bMjiggle,
bMCount,
mixPos,
mixers_x,
mixers_y,
MixersEase,
MixersTween;

//Set Board Mixers Arguments
boardMixers = noone; //Reset Array
var i=-1, j=-1, k = 7;
mixArea= ceil(BOARD_TOTAL * fieldDensity / 10);// .02);
    //Might make more sense to scale this by powerDensity... then again if it's not broken don't fix it...  I enjoyed 15x and 30x
//mixCost = 200*levelDiffAdj * fieldDensity //
mixCost = BOARD_TOTAL * fieldDensity * .5; //.6
bMStartInventory = 3;
var tap_txt = "";
//if touchPad tap_txt = "Place area to "
//else tap_txt = "Tap area to "


//Star Marker - place star
boardMixers[++i,(++j)mod k] = 1; //inventory
boardMixers[i,(++j)mod k] = -1; //obj type
boardMixers[i,(++j)mod k] = scr_codex_get_sprite(-1)//object_get_sprite(obj_star); //sprite
boardMixers[i,(++j)mod k] = "Star#Egg";//"Star#Marker"; //string description
boardMixers[i,(++j)mod k] = 1; //area of effect
boardMixers[i,(++j)mod k] = 0; //object cost
boardMixers[i,(++j)mod k] = tap_txt+"place star."; //how to use dialogue
//Board Fill - fill area with basic deflectors
boardMixers[++i,(++j)mod k] = bMStartInventory; //inventory
boardMixers[i,(++j)mod k] = 0; //obj type
boardMixers[i,(++j)mod k] = scr_codex_get_sprite(0)// object_get_sprite(obj_reflector_parent_basic); //sprite
boardMixers[i,(++j)mod k] = "Board#Fill"; //string description
boardMixers[i,(++j)mod k] = mixArea; //area of effect
boardMixers[i,(++j)mod k] = round(mixCost * (1-powerDensity) * 1); //object cost
boardMixers[i,(++j)mod k] = tap_txt+"fill with basic deflectors."; //how to use dialogue
//Board Remake - remakes the area with new deflectors //was board clean with removed basic deflectors
boardMixers[++i,(++j)mod k] = bMStartInventory; //inventory
boardMixers[i,(++j)mod k] = 4; //obj type
boardMixers[i,(++j)mod k] = scr_codex_get_sprite(4)// object_get_sprite(obj_powerup_parent_bomb); //sprite
boardMixers[i,(++j)mod k] = "Board#Respawn"; //"Board#Clean";//string description
boardMixers[i,(++j)mod k] = mixArea; //area of effect
boardMixers[i,(++j)mod k] = round(mixCost*(powerDensity)*1); //object cost
boardMixers[i,(++j)mod k] = tap_txt+"randomize with new deflectors."; 
//boardMixers[i,(++j)mod k] = "Tap area to remove basic deflectors."; //how to use dialogue
//Board Promote -  promotes basic deflectors to special deflectors
boardMixers[++i,(++j)mod k] = bMStartInventory; //inventory
boardMixers[i,(++j)mod k] = 1; //obj type
boardMixers[i,(++j)mod k] =  scr_codex_get_sprite(1)//object_get_sprite(obj_powerup_parent_ups); //sprite
boardMixers[i,(++j)mod k] = "Board#Promote"; //string description
boardMixers[i,(++j)mod k] = ceil(mixArea/2); //area of effect
boardMixers[i,(++j)mod k] = round(mixCost*(powerDensity)*.75); //object cost
boardMixers[i,(++j)mod k] = tap_txt+"promote basic deflectors."; //how to use dialogue
//Board Reshuffle - swaps places of deflectors
boardMixers[++i,(++j)mod k] = bMStartInventory; //inventory
boardMixers[i,(++j)mod k] = 3; //obj type
boardMixers[i,(++j)mod k] =  scr_codex_get_sprite(3)//object_get_sprite(obj_powerup_parent_neutral); //sprite
boardMixers[i,(++j)mod k] = "Board#Shuffle"; //string description
boardMixers[i,(++j)mod k] = ceil(mixArea*1.5); //area of effect
boardMixers[i,(++j)mod k] = round(mixCost*(powerDensity)*.20); //object cost
boardMixers[i,(++j)mod k] = tap_txt+"reorder deflectors."; //how to use dialogue
//Board Demote - demotes special reflectors to basic deflectors
boardMixers[++i,(++j)mod k] = bMStartInventory; //inventory
boardMixers[i,(++j)mod k] = 2; //obj type
boardMixers[i,(++j)mod k] =  scr_codex_get_sprite(2)//object_get_sprite(obj_powerup_parent_downs); //sprite
boardMixers[i,(++j)mod k] = "Board#Reroll"; //string description
boardMixers[i,(++j)mod k] = ceil(mixArea/2); //area of effect
boardMixers[i,(++j)mod k] = round(mixCost*(powerDensity)*2); //object cost
boardMixers[i,(++j)mod k] = tap_txt+"randomize special deflectors."; //how to use dialogue
//boardMixers[i,(++j)mod k] = tap_txt+"demote special deflectors."; //how to use dialogue

//Not sure if fill should be 100% probability, delete should be or maybe not.
//Might be more interesting if delete only has some probability
//I think guaranteed is better but with smaller area.

bMStarIndex = 0;
bMStarType = obj_star_marker
bMSelected[0] = noone;
bMX = 0;
bMY = 0;
bMXS = 0;
bMYS = 0;
bMYadj = 0//100;
bMRad = 0;
bMScheduler = noone;
sMSelected = false //check if star marker selected
ds_list_clear(global.SelectedCells); //list for selecting cells
//Icon Jigglers
bMjiggletime = 1.0*room_speed
for (var i=0;i&lt;7i++){
    for (var j=0;j&lt;3;j++){
        bMjiggle[i,j] = 0;
    }
}
//Text Displayes
for (var i=0;i&lt;7;i++){
    bMtext[i] = 0;
}






bMCount[0] = 0;

mixPos[0] = 0;
//Normal Position
mixers_x[0] = centerfieldx - 2.5*90-15/2;//GAME_X +60;
mixers_y[0] = fieldEndY+15+30;
dialogue_x[0] = GAME_MID_X;
dialogue_y[0] = (mixers_y[0] +GAME_Y+GAME_H)/2; //(fieldEndY + mixers_y)/2;
dialogue_w[0] = (GAME_W* 11/32 * 2);
if TOUCH_ENABLED {
    dialogue_phrase[0] = "Place area to " //Place modifier to
}
else{
    dialogue_phrase[0] = "Tap area to "
}
//Tutorial Position (set by obj_control_tutorial)
mixers_x[1] = 0;
mixers_y[1] = -200; //NB: Just in case mixpos is switched at the wrong time
dialogue_x[1] = 0;
dialogue_y[1] = 0;
dialogue_w[1] = 0;
if TOUCH_ENABLED {
    dialogue_phrase[1] = "Drag area to board and then tap to " //"Place area to " //Place modifier to
}
else{
    dialogue_phrase[1] = "Tap area to "
}


MixersEase[0] = 0;
MixersTween = noone;




//Ease Types
guiEase= EaseOutBack;//choose(EaseLinear,EaseInOutBack,EaseInOutQuad)
guiEaseReverse = EaseInBack;

//End Button For Sandbox Mode
endEase[0] = 0;
endTween = noone;
endSchedule = noone;




</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Controls Detection

scr_ModifiersDragSelection();
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Board Reset for Tutorial

if GAME_ACTIVE and TUTORIAL_ENABLED{
     //If no stars remaining
    if (!instance_exists(obj_star) and MOVE_ACTIVE){
        with (obj_control_game){
    
            scr_reset_round_state()
    
            if MODE == MODES.MOVES{
                with(obj_star_marker_tutorial){
                    instance_destroy();
                }
                with(obj_star_marker){
                    instance_destroy();
                }
                
                
                //Reset Mixers
                for (var z = 0, n = array_height_2d(boardMixers); z &lt; n; z ++){
                    boardMixers[z,0] = 0//bM_StartInventory;
                }
                //Set Stars to 1;
                boardMixers[bMStarIndex,0] = 1;
                

                
                //Flag to reset inventory after tutorial
                obj_control_tutorial.bMResetInventory = true;
                
                // Reset Score in Tutorial
                score = 0; 
                score_display = 0; 
                score_p1 = 0; ///maybe tween this? nah
                
                //Reset Deathcounters     
                scr_reset_deflector_data();
                
                // Stop the Clock
                moves_time_active = false;
                
                // Reset Move Clock
                scr_mode_moves_reset_time();
                
                // Get End Clear Value
                moves_board_end = instance_number(obj_reflector_parent);
                moves_clear_messages++ //Flag Clear Message to Show
                
                    
            }
            //Respawn board, retween and reset vars
            if lives &gt; 0 and MOVES_REMAINING &gt; 0 and time_left &gt; 0 {
            
                scr_respawn_tween()
                
            }
            scr_sound(sd_turn_end,1)// audio_play_sound(sd_turn, 1, false);                    
        
        }
    }
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Board Modifiers


if (MODE == MODES.MOVES or MODE == MODES.SANDBOX) and GAME_ACTIVE{
    if MixersEase[0] == 1
    {
        
    
        //Check Selection
        scr_ModifiersCheckSelection(obj_star_marker, !TweenExists(MixersTween))
     
        
        
        
        //Tap to launch star
        scr_ModifiersLaunchStars(bMStarType, true)
    
    
       //Ease out mixers on MOVE_ACTIVE
       if MOVE_ACTIVE and !TweenExists(MixersTween){
          MixersTween = TweenFire(id,MixersEase,EaseLinear,
                           TWEEN_MODE_ONCE, true, 0, 1,  MixersEase[0],0)//guiEase
          bMSelected[0] = noone;
       }
        
        
        
    
        //Place Modifier Effect
        scr_ModifiersPlaceSelection()
    
    }
    
    
    //Sandbox End Button Easing    
    if MODE == MODES.SANDBOX and !TweenExists(endTween) and !instance_exists(obj_control_tutorial){ //MOVE_COUNT &gt;= 1 { //
        if MOVE_ACTIVE and endEase[0] == 1 {
            endTween = TweenFire(id,endEase,guiEase,
                           TWEEN_MODE_ONCE, true, 0,1,endEase[0],0);
        }else if !MOVE_ACTIVE and endEase[0] == 0 {
            endTween = TweenFire(id,endEase,guiEaseReverse,
                        TWEEN_MODE_ONCE, true,0,1, endEase[0],1)
        }
    }
    
}

</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///turninit_tutorial script [unused]


/*

This would have been an option, all we'd need to do is put the init code here and wipe the +level stuff.

I think it's ok in objconsole though.


</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Draw Board Modifiers


//NB: We can always turn this into a script with the obj_control_game version.
//Or turn this modifiers stuff into its own object.

if (MODE == MODES.MOVES or MODE == MODES.SANDBOX) and GAME_ACTIVE{


    if MixersEase[0] &gt; 0 {
    
        draw_set_valign(fa_middle)
        draw_set_halign(fa_center)
        for (var i=0; i&lt;6; i++){
            var mixer_size = 60
            var mixer_scale = mixer_size/sprite_get_width(boardMixers[i,2]);
            var mixer_x = mixers_x[mixPos[0]] + i*90 + bMjiggle[i,1];
            var mixer_y = mixers_y[mixPos[0]] + bMjiggle[i,2];
            
            //If Star marker
            if i == bMStarIndex{
               var mixer_size = 60
               var mixer_scale = mixer_size/100;
            }
            
            var scaleUp = 1.25;
            var mixerHover = point_in_rectangle(mouse_x,mouse_y,mixer_x-mixer_size/2*scaleUp,mixer_y-mixer_size/2*scaleUp,
                                                                mixer_x+mixer_size/2*scaleUp,mixer_y+mixer_size/2*scaleUp)
            //Check if mouse over icon
            if mixerHover and MixersEase[0] == 1 and !TweenExists(MixersTween) and
               (!touchPad or mouse_check_button(mb_left) or ScheduleExists(bMScheduler)) 
            {
                mixer_scale *= scaleUp;
                mixer_size *= scaleUp;
            
            }
            
            var mixer_alpha = clamp(MixersEase[0],0,1);
            var mixer_col = power_type_colors(boardMixers[i,1],0);
            if bMSelected[0] == i{
                
                //Draw instructions dialogue
                if bMtext[i] &gt; 0{
                    draw_set_font(fnt_game_calibri_25_bold);
                    
                    var instruct_x = dialogue_x[mixPos[0]];
                    var instruct_y = dialogue_y[mixPos[0]];
                    var instruct_w = dialogue_w[mixPos[0]];
                    var instruct_alpha = clamp(bMtext[i]/(1*room_speed),0,1)*mixer_alpha;
                    var instruct_txt = dialogue_phrase[mixPos[0]] + boardMixers[i,6];
                    
                    draw_text_ext_transformed_colour(instruct_x,instruct_y,instruct_txt,-1,
                    instruct_w,1,1,0, mixer_col,mixer_col,mixer_col,mixer_col,instruct_alpha);
                }
                mixer_alpha *= .5;
            }
            
            //Draw mixer button
            draw_sprite_ext(boardMixers[i,2],0,mixer_x,mixer_y,mixer_scale,mixer_scale,
                0,mixer_col,mixer_alpha);
            //Draw mixer label
            draw_set_font(fnt_game_bn_12_bold)
            draw_text_colour(mixer_x,mixer_y+mixer_size/2+15,boardMixers[i,3],
            COLORS[0],COLORS[0],COLORS[0],COLORS[0],mixer_alpha)
                
            //Draw mixer inventory
            draw_set_font(fnt_game_bn_15_black)
            draw_sprite_ext(s_v_icon_background,0,mixer_x+mixer_size/2-4,mixer_y-mixer_size/2+4,24/60,24/60,0,
                COLORS[0],mixer_alpha) //24x24 canvas for these
            draw_text_colour(mixer_x+mixer_size/2-4,mixer_y-mixer_size/2,string(boardMixers[i,0]),
                COLORS[6],COLORS[6],COLORS[6],COLORS[6],mixer_alpha)
            
            
        
        }
        
        
        
        //Draw Selected Mixer Highlight effect    
        if bMSelected[0] != noone{
            var mType = bMSelected[0];
            if ds_list_empty(global.SelectedCells){
                //If board mixer
                if mType != bMStarIndex{
                    bMRad = sqrt(boardMixers[mType,4]*cellW*cellH / pi);
                    var mCol = power_type_colors(boardMixers[mType,1],0);
                    mCol = merge_color(mCol,COLORS[0],.5);
                    var mScale = 2*bMRad/60;
                    draw_sprite_ext(s_v_deflector_rounder_60,0,bMX, 
                    bMY-bMRad-(touchPad*bMYadj),
                    mScale,mScale,0,mCol,.5);
                }
                //If star marker
                else{
                    bMRad = cellH*2
                    var mCol = power_type_colors(boardMixers[mType,1],0);
                    var mScale = 2*bMRad/100;
                    draw_sprite_ext(boardMixers[mType,2],0,bMX, 
                    bMY-bMRad-(touchPad*bMYadj),
                    mScale,mScale,0,mCol,.5);
                
                }
            }
            //Draw Individual Cells highlighted
            else{
                //else loop through bMSelectedCells list and draw background or colored dots on each one, not sure which yet
                //we can toy with the appearances, i could also draw the circle too so it draws both
                var coordinatesXY;
                var mCol = power_type_colors(boardMixers[mType,1],0);
                mCol = merge_color(mCol,COLORS[0],.5);
                for (var k =0, n = ds_list_size(global.SelectedCells); k &lt; n; k++){
                    var gridXY = global.SelectedCells[| k];
                    var fieldXY = noone; //this is set to noone to clear the array for html bugs
                    fieldXY = convertGridtoXY(gridXY[0],gridXY[1]);
                     
    
                    draw_sprite_ext(s_v_deflector_rounder_60,0,fieldXY[0],fieldXY[1],
                    cellW/60,cellW/60,0,mCol,.5);
                
                }
                //If star marker
                if mType == bMStarIndex{
                    bMRad = cellH*2
                    var mCol = power_type_colors(boardMixers[mType,1],0);
                    var mScale = 2*bMRad/100;
                    draw_sprite_ext(boardMixers[mType,2],0,fieldXY[0],fieldXY[1],mScale,mScale,0,mCol,.5);
                
                }
            }
        }
        
        //Not enough inventory dialogue
        if bMtext[array_length_1d(bMtext)-1] &gt; 0{
            draw_set_font(fnt_game_calibri_25_bold);
            
            var text_x = dialogue_x[mixPos[0]];
            var text_y = dialogue_y[mixPos[0]];
            var text_w = dialogue_w[mixPos[0]];
            //var text_text = "Out of stock."
            var text_text = "We require additional modifiers."
            //var text_y = (fieldEndY + mixers_y)/2;
            var mCol = COLORS[0];//power_type_colors(boardMixers[mType,1],0);
            draw_text_colour(text_x,text_y,text_text,
            mCol,mCol,mCol,mCol,clamp(bMtext[array_length_1d(bMtext)-1]/(1*room_speed),0,1));
            
        }
    }

 
    //Decrement BMjigglers
    var jiggle_strength = 5;
    for (var i=0, n=array_height_2d(bMjiggle); i &lt; n; i++){
        //Coordinate jigglers
        if bMjiggle[i,0] &gt; 0{
            bMjiggle[i,0] -= 1
            bMjiggle[i,1] = random_range(-1,1)*jiggle_strength;
            bMjiggle[i,2] = random_range(-1,1)*jiggle_strength;
        }
        else if bMjiggle[i,0] &gt;= -1{
            bMjiggle[i,0] = -2
            bMjiggle[i,1] = 0;
            bMjiggle[i,2] = 0;
        
        }
    }
    //Decrement Text Display Timer
    for (var i=0, n=array_length_1d(bMtext); i &lt; n; i++){
        if bMtext[i] &gt;= -1{
            bMtext[i] -= 1
        }
    }
    
    //DEBUG
    //draw_circle_colour(bMX, bMY-bMRad-(touchPad*bMYadj),cellH,c_blue,c_blue,false);
    
    
    // Sandbox End Button
    if MODE == MODES.SANDBOX and !instance_exists(obj_control_tutorial){ // MOVE_COUNT &gt;= 1 {
        draw_set_font(fnt_game_bn_26_black);
        draw_set_valign(fa_middle);
        draw_set_halign(fa_center);
        //Set Button Data
        text_text = "end";
        text_h = string_height(text_text) * 1.25; 
        text_w = string_width(text_text) * 1.25;
        text_x = GAME_X+GAME_W -10 -text_w/2 +(100 -100*endEase[0]);
        text_y = GAME_Y+GAME_H -20 -text_h/2 +(100 -100*endEase[0]);
        text_color = COLORS[0];
        text_scale = 1;
        
        
        //Check for Mouse Hover
        button_hover = point_in_rectangle(mouse_x,mouse_y,
                        text_x-text_w,text_y-text_h,text_x+text_w,text_y+text_h) 
        
        //Prevent touchpad from moving to a button
        if button_hover{ tp_on_button[0] = 2}
            
        if button_hover and (!touchPad or mouse_check_button(mb_left)) and (!TweenExists(endTween))
        {
            //Grow and alt color on hover
            text_scale *= 1.2;
            text_color = merge_colour(text_color,COLORS[6],.5); //merge with background
            //On Clicking help
            if mouse_check_button_pressed(mb_left) and !ScheduleExists(endSchedule)
            {
                SWIPE = false; // disable other clicks
                mouse_clear(mb_left);
    
                //Tween Out
                MixersTween = TweenFire(id,MixersEase,EaseLinear,
                                TWEEN_MODE_ONCE,1,0,.5,MixersEase[0],0); 
                //End Sandbox Mode
                endSchedule = ScheduleScript(id,1,.5 ,
                                array_set_value,obj_control_game.sandbox_gameover,true);
                //click sound
                scr_sound(sd_menu_click,1,false);
            }
        }
        // Draw Button Text
        draw_text_ext_transformed_colour(text_x, text_y, text_text, 
        -1, -1, text_scale, text_scale, 0, text_color,text_color,text_color,text_color,1);
        
        //NB: Maybe add jigglers to this? Not sure.
    }
        
   
    
}


</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
