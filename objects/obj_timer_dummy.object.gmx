<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>-100</depth>
  <persistent>0</persistent>
  <parentName>obj_parent_dummy</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///ini vars


tim_max = (30)*room_speed;
tim_decrement = .5//1;

tim_current = tim_max+2*room_speed; //2 second delay on countdown

tim_string = string_format(max(0.00,clamp((tim_current/tim_max),0,1)*30),2,2);



tim_halfw = 128//(obj_control_game.startangle*2/90)*(fieldW)*.5*cellW*.8; 
tim_h = 22//obj_control_game.barheight;

tim_color = COLORS[0];

tim_x = 0;
tim_y = 0;

scene_alpha = obj_control_tutorial.tutorialTextTween[0];
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///perform scene


scene_alpha = obj_control_tutorial.tutorialTextTween[0];


if scene_alpha == 1{

    tim_current -= tim_decrement;
    if tim_current &gt; 0 tim_current -= tim_decrement;
    //maybe it shouldn't loop back up.
    //else tim_current = tim_max;
           
    //Set time string
    tim_string = string_format(max(0.00,clamp((tim_current/tim_max),0,1)*30),2,2);
    tim_color = COLORS[6];
    if real(tim_string) &gt; 6.0{ 
         tim_color = COLORS[6]
    }
    else if real(tim_string) &lt;= 0{
         tim_color = merge_color(COLORS[2], COLORS[6],lerp(0,1,FULL_SECOND_LERP))
    }
    else if real(tim_string) &lt; 5.0{
         tim_color = merge_color(COLORS[2], COLORS[6],lerp(0,1,FULL_SECOND_LERP))
    
    }

}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///draw scene


if scene_alpha &gt; 0{
    
    /*
    //DRAW WIDE BAR 2 PIXELS; TIME BAR 
    draw_rectangle_colour(tim_x - tim_halfw, tim_y-tim_h,tim_x +tim_halfw, 
                           tim_y, COLORS[0], COLORS[0], COLORS[0], COLORS[0],1)
    draw_rectangle_colour(tim_x - tim_halfw+1, tim_y-tim_h+1,tim_x +tim_halfw-1, 
                           tim_y-1, COLORS[0], COLORS[0], COLORS[0], COLORS[0],1) 
                           
    //COMPUTE BAR FILL               
    var total_bar = (tim_x + tim_halfw) - (tim_x - tim_halfw)
    var remaining_bar = max(0,min(1,(tim_current)/(tim_max)))*total_bar
    //DRAW BAR FILL
    draw_rectangle_colour(tim_x - tim_halfw, tim_y-tim_h,tim_x - tim_halfw + remaining_bar, 
                           tim_y, COLORS[0], COLORS[0], COLORS[0], COLORS[0],0)
    
   **/ 
   var out_barscale = 2*tim_halfw / sprite_get_width(spr_bar_out);
   draw_sprite_ext(spr_bar_out,0,tim_x - tim_halfw, tim_y, out_barscale,1,0,COLORS[0], scene_alpha);
   
    var prog_bar = max(0,min(1,(tim_current)/(tim_max)));
    var fill_barscale = out_barscale * prog_bar
    draw_sprite_ext(spr_bar_in,0,tim_x - tim_halfw, tim_y, fill_barscale, 1, 0, COLORS[0], scene_alpha);
   
    var prevAlpha = draw_get_alpha();
    draw_set_alpha(scene_alpha)
    
    //DRAW TIME REMAINING TEXT
    draw_set_font(fnt_game_calibri_16_bold)
    draw_set_halign(fa_center) 
    draw_set_valign(fa_middle);
    draw_text_outline_color(tim_x,tim_y-tim_h/2 +1,tim_string,tim_color,tim_color,tim_color,tim_color,scene_alpha,
    4,COLORS[0],16)

    draw_set_alpha(prevAlpha)
}

</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
