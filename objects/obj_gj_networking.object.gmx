<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>0</visible>
  <depth>0</depth>
  <persistent>-1</persistent>
  <parentName>obj_persistent_parent</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///API example by Florian van Strien
//Init system
gj_init("37258","04ac1eb9f55828bc736c1250f17f8a68")
http_highscore=-1
score_val=0;
level_val=0;
table_id=""; // current score table id (in gj system)
high_score=0; // highscore  for the current game mode. Updated before updating users high_score on the server 
//to see if he made more scores then stored on the  server

//Try to login automatically
if(gj_user_autologin())
{  
    //And init session too.
    gj_session_open() // lets other players to see if their friend(or  just other player, Im not sure) are playing starified.
    alarm[0]=30*room_speed //Ping every 30 seconds.  
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Ping session
gj_session_ping(true) //User is active.
alarm[0]=30*room_speed //Ping every 30 seconds.
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="62">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Check result id...

var res_id=gj_result_id();
if(res_id==http_highscore) //If we just recieved the highscore. 
{
    if(gj_result_status())
    {
        if gj_user_isloggedin() {
            high_score=gj_result_data_field("score");
            if !is_undefined(high_score)
            if real(score_val)&gt;real(high_score)
            gj_scores_add(table_id,score_val,score_val,string(level_val));
            
            //for table_id see scr_bm_gj_get_table_id
        }
        //Else use guest scoring
        else{
            //If we want custom names for guests we'll need a way to grab them.
            //Could probably use that old keyboard stuff i had back in the day
            //or find a better one, as i'm sure there are e.g. that text extension engine
            //but this starnonymous will do for now.
            gj_scores_add_guest(table_id,score_val,score_val,string(level_val), "Starnonymous");
        
        }
    }
    //error handling
    else{
        high_score=0;
    }
}

/*
else if(resultid==httprequest[2]) //Just recieved the login count
{
    var status=gj_result_status();
    if(status==1)
    {
        //User logged in already. Check login count and add 1 to the logincount.
        gj_datastore_update_user("logincount","1","add")
        //And check how many time the user logged in before.
        loggedontimes=real(gj_result_data_field("data"))
    }
    else if(status==0)
    {
        if(gj_result_error()="No item with that key could be found.")
        {
            //Item does not exists, so user didn't logon earlier. Set login to 1 time.
            gj_datastore_set_user("logincount","1")
        }
    }
}
else if(resultid==httprequest[3]) //If we just recieved user information.
{
    if(gj_result_status())
    {
        currusertype=gj_result_data_field("type") //Loading user type.
    }
}
else if(resultid==httprequest[4]) //If user is awesome (last trophy is achieved)
{
    if(gj_result_status())
    {
        if(gj_result_data_field("achieved")!="false") //Check if trophy is achieved.
        {
            userisawesome=true
            awesomesince=gj_result_data_field("achieved") //This now returns since when the user has the trophy.
        }
    }
}
*/
gj_result_clear()
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints>
    <point>0,0</point>
    <point>180,180</point>
  </PhysicsShapePoints>
</object>
